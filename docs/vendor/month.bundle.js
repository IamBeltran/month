var Month;(()=>{var t={125:t=>{function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return n(t)}function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function o(t){var e="function"==typeof Map?new Map:void 0;return(o=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return i(t,arguments,c(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),u(n,t)})(t)}function i(t,e,r){return(i=a()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&u(o,r.prototype),o}).apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var s,l,f,y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(s,t);var e,o,i=(e=s,o=a(),function(){var t,n=c(e);if(o){var i=c(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return r(this,t)});function s(t,e){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s);var o="function"==typeof t?t.apply(t,e):t;if("string"!=typeof o)throw new TypeError("error message must be string");return(r=i.call(this,o)).name="MonthError",Error.captureStackTrace&&Error.captureStackTrace(n(r),s),r}return s}(o(Error));f={TYPE_CURRENT_OPTION:"Current option must be a Date",TYPE_DATEBOOK_OPTION:"Datebook option must be an Array",INVALID_WEEKEND_OPTION:"Weekend option must be a number between 0 to 12 or a string that match the regex /^[0-1]{7}$/",INVALID_DATEBOOK_SCHEMA:"Some datebook's element has invalid schema"},(l="messages")in(s=y)?Object.defineProperty(s,l,{value:f,enumerable:!0,configurable:!0,writable:!0}):s[l]=f,t.exports=y},29:(t,e,r)=>{var n=r(722),o=/^[0-1]{7}$/,i=/^\d{4}-\d{2}-\d{2}/,a=["task","event","appointment","meeting"];e.weekend=function(t){var e=n.isIntNumber(t)&&t>=0&&t<=15,r=o.test(t);return e||r},e.datebook=function(t){return t.map((function(t){return function(t){return!(!n.isObject(t)||!("date"in t&&"title"in t&&"description"in t&&"holiday"in t&&"type"in t)||!n.isString(t.date)||!n.isString(t.title)||!n.isString(t.description)||!n.isString(t.type)||!n.isBoolean(t.holiday)||!i.test(t.date)||Number.isNaN(Date.parse(t.date))||Date.parse(t.date)<=0||!a.includes(t.type)||0===t.title.length||0===t.description.length)}(t)})).every((function(t){return!0===t}))}},565:(t,e,r)=>{function n(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i=r(722),a=new Map([[0,"0000011"],[1,"1000001"],[2,"1100000"],[3,"0110000"],[4,"0011000"],[5,"0001100"],[6,"0000110"],[7,"0000001"],[8,"1000000"],[9,"0100000"],[10,"0010000"],[11,"0001000"],[12,"0000100"],[13,"0000010"],[14,"0000001"],[15,"0000000"]]),u=[1,2,3,4,5,6,0];e.createYYMMDD=function(t){return[t.getFullYear(),t.getMonth(),t.getDate()]},e.createWeekend=function(t){var e,r=(e=t,i.isIntNumber(e)&&e>=0&&e<=14?a.get(e):e).split("");return u.reduce((function(t,e,i){return"1"===r[i]?[].concat(function(t){if(Array.isArray(t))return o(t)}(a=t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(a)||n(a)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]):t;var a}),[])},e.createSCE=function(t){var e,r,o=(r=3,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(i.push(n.value),!e||i.length!==e);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(e,r)||n(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];return[1,o[2],new Date(i,a+1,0).getDate()]}},722:(t,e)=>{var r=/\s([a-z|A-Z]+)/,n=function(t){return{}.toString.call(t)},o=function(t){return n(t).match(r)[1].toLocaleLowerCase()},i=function(t){return"[object Object]"===n(t)},a=function(t){return i(t)&&!Object.getPrototypeOf(t)};e.isArray=function(t){return Array.isArray(t)},e.isBoolean=function(t){return"[object Boolean]"===n(t)},e.isDate=function(t){return"[object Date]"===n(t)},e.isFunction=function(t){return"[object Function]"===n(t)},e.isNumber=function(t){return"[object Number]"===n(t)},e.isFloatNumber=function(t){return"[object Number]"===n(t)&&!Number.isInteger(t)},e.isIntNumber=function(t){return"[object Number]"===n(t)&&Number.isInteger(t)},e.isString=function(t){return"[object String]"===n(t)},e.isObject=i,e.isNullObject=a,e.isPOJO=function(t){return i(t)&&(a(t)||"Object"===Object.getPrototypeOf(t).constructor.name)},e.isEmptyArray=function(t){return Array.isArray(t)&&0===t.length},e.isEmptyObject=function(t){return i(t)&&0===Object.getOwnPropertyNames(t).length},e.isArrayOf=function(t,e){return t.map((function(t){return e.includes(o(t))})).every((function(t){return!!t}))},e.isObjectOf=function(t,e){return Object.keys(t).map((function(r){return e.includes(o(t[r]))})).every((function(t){return!!t}))}},579:(t,e,r)=>{function n(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var u=r(125),c=r(722),s=r(29),l=r(565),f=r(18),y=r(451),p=r(942),d=r(608),b=r(514),h=r(795),m=u.messages,v=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.current,n=void 0===r?new Date:r,o=e.weekend,a=void 0===o?0:o,v=e.datebook,D=void 0===v?[]:v;if(i(this,t),!c.isDate(n))throw new u(m.TYPE_CURRENT_OPTION);if(!s.weekend(a))throw new u(m.INVALID_WEEKEND_OPTION);if(!c.isArray(D))throw new u(m.TYPE_DATEBOOK_OPTION);if(!c.isEmptyArray(D)&&!s.datebook(D))throw new u(m.INVALID_DATEBOOK_SCHEMA);Object.defineProperty(this,"YYMMDD",{value:l.createYYMMDD(n)}),Object.defineProperty(this,"WEEKEND",{value:l.createWeekend(a)}),Object.defineProperty(this,"SCE",{value:l.createSCE(this.YYMMDD)}),this.year=this.YYMMDD[0],this.number=this.YYMMDD[1],this.planner=f({datebook:D,YYMMDD:this.YYMMDD,SCE:this.SCE}),this.weekends=y({YYMMDD:this.YYMMDD,WEEKEND:this.WEEKEND,SCE:this.SCE}),this.holidays=p(this.planner),this.nonworkdays=d({weekends:this.weekends,holidays:this.holidays}),this.days=b({YYMMDD:this.YYMMDD,SCE:this.SCE,weekends:this.weekends,nonworkdays:this.nonworkdays,planner:this.planner}),this.summary=h({YYMMDD:this.YYMMDD,nonworkdays:this.nonworkdays})}var e,r;return e=t,(r=[{key:"addDatebook",value:function(t){if(!c.isArray(t))throw new u(m.TYPE_DATEBOOK_OPTION);if(!c.isEmptyArray(t)&&!s.datebook(t))throw new u(m.INVALID_DATEBOOK_SCHEMA);var e=f({datebook:t,YYMMDD:this.YYMMDD,SCE:this.SCE}),r=e.tasks,o=e.events,i=e.appointments,a=e.meetings,l=this.planner,y=l.tasks,v=l.events,D=l.appointments,g=l.meetings,w=[].concat(n(y),n(r)),O=[].concat(n(v),n(o)),M=[].concat(n(D),n(i)),S=[].concat(n(g),n(a));return this.planner={tasks:w,events:O,appointments:M,meetings:S},this.holidays=p(this.planner),this.nonworkdays=d({weekends:this.weekends,holidays:this.holidays}),this.days=b({YYMMDD:this.YYMMDD,SCE:this.SCE,weekends:this.weekends,nonworkdays:this.nonworkdays,planner:this.planner}),this.summary=h({YYMMDD:this.YYMMDD,nonworkdays:this.nonworkdays}),this}}])&&a(e.prototype,r),t}();t.exports=v},514:t=>{function e(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(i.push(n.value),!e||i.length!==e);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){for(var r=t.YYMMDD,n=t.SCE,o=t.weekends,i=t.nonworkdays,a=t.planner,u=e(r,2),c=u[0],s=u[1],l=e(n,3),f=l[0],y=l[1],p=l[2],d=a.tasks,b=a.events,h=a.appointments,m=a.meetings,v=[],D=new Date(c,s,1),g=0===D.getDay()?0:1,w=0,O=function(t){D.setDate(t);var e=!i.includes(t),r=o.includes(t),n=D.getDay(),a=t<y?"elapsed":t===y?"current":"remaining",u=d.filter((function(e){return e.YYMMDD[2]===t})).length,l=b.filter((function(e){return e.YYMMDD[2]===t})).length,f=h.filter((function(e){return e.YYMMDD[2]===t})).length,p=m.filter((function(e){return e.YYMMDD[2]===t})).length;0===n&&(g+=1),e&&(w+=1);var O={day:t,date:[c,s,t],weekday:n,type:a,week:g,workday:w,isWorkday:e,isWeekend:r,scheduled:{tasks:u,events:l,appointments:f,meetings:p,total:u+l+f+p}};v.push(O)},M=f;M<=p;M+=1)O(M);return v}},942:t=>{function e(t){return function(t){if(Array.isArray(t))return r(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){var r=function(t){return[].concat(e(t.tasks),e(t.events),e(t.appointments),e(t.meetings))}(t);if(0===r.length)return[];var n=r.reduce((function(t,r){return r.holiday?[].concat(e(t),[r.YYMMDD[2]]):e(t)}),[]);return Array.from(new Set(n))}},608:t=>{function e(t){return function(t){if(Array.isArray(t))return r(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var n=function(t,e){return t-e};t.exports=function(t){var r=t.weekends,o=t.holidays;return Array.from(new Set([].concat(e(r),e(o)))).sort(n)}},18:t=>{function e(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function r(t){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?e(Object(o),!0).forEach((function(e){n(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):e(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var o=function(t,e){return t.day-e.day};t.exports=function(t){var e,n,i,a=(e={datebook:t.datebook,YYMMDD:t.YYMMDD,SCE:t.SCE},n=e.YYMMDD,i=e.SCE,e.datebook.map((function(t){return r(r({},t),{},{YYMMDD:(e=t.date,e.slice(0,10).split("-").map((function(t){return parseInt(t,10)})).map((function(t,e){return 1===e?t-1:t})))});var e})).filter((function(t){var e=t.YYMMDD[0]===n[0],r=t.YYMMDD[1]===n[1],o=t.YYMMDD[2]>=i[0]&&t.YYMMDD[2]<=i[2];return e&&r&&o}))).sort(o);return{tasks:a.filter((function(t){return"task"===t.type})),events:a.filter((function(t){return"event"===t.type})),appointments:a.filter((function(t){return"appointment"===t.type})),meetings:a.filter((function(t){return"meeting"===t.type}))}}},795:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){for(var r=t.YYMMDD,n=t.nonworkdays,o=(Y=3,function(t){if(Array.isArray(t))return t}(S=r)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(i.push(n.value),!e||i.length!==e);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(S,Y)||function(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}(S,Y)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1],u=o[2],c=new Date(i,a,1),s=new Date(i,a,u),l=new Date(i,a+1,0),f=s.getDate(),y=l.getDate(),p=f-1,d=y-f,b=parseFloat((f/y).toFixed(2)),h=new Date(i,a,1),m=0===c.getDay()?0:1,v=m,D=m,g=0,w=0,O=1;O<=y;O+=1){h.setDate(O);var M=h.getDay();0===M&&O<=f&&(v+=1),0===M&&(D+=1),!n.includes(O)&&O<=f&&(g+=1),n.includes(O)||(w+=1)}var S,Y;return{dates:{start:c,current:s,end:l},days:{current:f,total:y,elapsed:p,remaining:d,percentage:b},weeks:{current:v,total:D,elapsed:v-1,remaining:D-v,percentage:parseFloat((v/D).toFixed(2))},workdays:{current:g,total:w,elapsed:g-1,remaining:w-g,percentage:parseFloat((g/w).toFixed(2))}}}},451:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){for(var r=t.YYMMDD,n=t.WEEKEND,o=t.SCE,i=function(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(i.push(n.value),!e||i.length!==e);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(t,r)||function(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(r,2),a=i[0],u=i[1],c=o[2],s=new Date(a,u,1),l=[],f=1;f<=c;f+=1){s.setDate(f);var y=s.getDay();n.includes(y)&&l.push(f)}return l}}},e={},r=function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}(579);Month=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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M0JnQnlFLEVBNEJoQi9CLE1BM0JlZ0MsRUE0QmZNLFFBN0JnQlAsRUFFZSxFQTRCL0JRLFVBN0JlUCxFQURDRCxFQStCaEJTLFdBM0JvQlosWUFKSkcsRUFDREMsR0FHMkNILFFBQVEsS0E2QnBFYSxTQUFVLENBQ1JwRixRQTNCbUIyRSxFQTRCbkJqQyxNQTNCa0JrQyxFQTRCbEJJLFFBN0JtQkwsRUFFa0IsRUE0QnJDTSxVQTdCa0JMLEVBRENELEVBK0JuQk8sV0EzQnVCWixZQUpKSyxFQUNEQyxHQUdpREwsUUFBUSxRLGtIQ2xDakZuSyxFQUFPQyxRQWZnQixTQUFDLEdBTXRCLElBTm1ELElBQTNCa0QsRUFBMkIsRUFBM0JBLE9BQVFpRCxFQUFtQixFQUFuQkEsUUFBU0YsRUFBVSxFQUFWQSxJQUN6QyxFLGsxQkFBQSxDQUFpQi9DLEVBQWpCLEdBQU9DLEVBQVAsS0FBV0MsRUFBWCxLQUNNaUYsRUFBUXBDLEVBQUksR0FDWnFCLEVBQVksSUFBSTdGLEtBQUswQixFQUFJQyxFQUFJLEdBQzdCOEMsRUFBVyxHQUVSd0MsRUFBSSxFQUFHQSxHQUFLTCxFQUFPSyxHQUFLLEVBQUcsQ0FDbENwQixFQUFVSSxRQUFRZ0IsR0FDbEIsSUFBTWIsRUFBVVAsRUFBVUUsU0FDdEJyQixFQUFReEUsU0FBU2tHLElBQVUzQixFQUFTb0MsS0FBS0ksR0FFL0MsT0FBT3hDLEtDakRMOEUsRUFBMkIsR0NFM0JDLEVEQ0osU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVKLEVBQXlCRyxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYXBMLFFBR3JCLElBQUlELEVBQVNpTCxFQUF5QkcsR0FBWSxDQUdqRG5MLFFBQVMsSUFPVixPQUhBc0wsRUFBb0JILEdBQVVwTCxFQUFRQSxFQUFPQyxRQUFTa0wsR0FHL0NuTCxFQUFPQyxRQ2xCV2tMLENBQW9CLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Nb250aC8uL3NyYy9Nb250aEVycm9yL2luZGV4LmpzIiwid2VicGFjazovL01vbnRoLy4vc3JjL2hlbHBlcnMvaXNWYWxpZC5qcyIsIndlYnBhY2s6Ly9Nb250aC8uL3NyYy9oZWxwZXJzL3JlYWRvbmx5LmpzIiwid2VicGFjazovL01vbnRoLy4vc3JjL2hlbHBlcnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vTW9udGgvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vTW9udGgvLi9zcmMvc2VydmljZXMvY3JlYXRlRGF5cy5qcyIsIndlYnBhY2s6Ly9Nb250aC8uL3NyYy9zZXJ2aWNlcy9jcmVhdGVIb2xpZGF5cy5qcyIsIndlYnBhY2s6Ly9Nb250aC8uL3NyYy9zZXJ2aWNlcy9jcmVhdGVOb25Xb3JrZGF5cy5qcyIsIndlYnBhY2s6Ly9Nb250aC8uL3NyYy9zZXJ2aWNlcy9jcmVhdGVQbGFubmVyLmpzIiwid2VicGFjazovL01vbnRoLy4vc3JjL3NlcnZpY2VzL2NyZWF0ZVN1bW1hcnkuanMiLCJ3ZWJwYWNrOi8vTW9udGgvLi9zcmMvc2VydmljZXMvY3JlYXRlV2Vla2VuZHMuanMiLCJ3ZWJwYWNrOi8vTW9udGgvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTW9udGgvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgTWFuYWdlcyBNb250aEVycm9yIG1vZHVsZSwgdXNlZCB0byBjcmVhdGUgYWxsIGVycm9ycyBzcGVjaWZpYyB0b1xuICogdGhlIE1vbnRoIGNsYXNzLlxuICovXG5cbi8vIOKUgeKUgVx0TU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogTW9udGhFcnJvciBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgYWxsIGVycm9ycyBzcGVjaWZpYyB0byB0aGUgJ01vbnRoJyBjbGFzcy5cbiAqXG4gKiBAY2xhc3MgICAgTW9udGhFcnJvclxuICogQGF1Z21lbnRzIEVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBNb250aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBNb250aEVycm9yLlxuICAgKlxuICAgKiBUaGUgYG1lc3NhZ2VgIHBhcmFtZXRlciBtdXN0IGJlIHR5cGUgYHN0cmluZ2Agb3IgYGZ1bmN0aW9uYC4gSWZcbiAgICogYSBmdW5jdGlvbiBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJzLCBuZWNlc3NhcnkgdG8gZXhlY3V0ZSB0aGUgZnVuY3Rpb25cbiAgICogbXVzdCBiZSBwYXNzZWQgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIgaW4gdGhlIGNvbnN0cnVjdG9yLCBpZiB0aGUgcmVzdWx0IG9mXG4gICAqIHRoZSBmdW5jdGlvbiBpcyBub3Qgb2YgdHlwZSBgc3RyaW5nYCwgaXQgd2lsbCB0aHJvdyBhIGBUeXBlRXJyb3JgLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgIE1vbnRoRXJyb3JcbiAgICogQHBhcmFtICAgICB7c3RyaW5nfEZ1bmN0aW9ufSBtZXNzYWdlIC0gTW9udGhFcnJvcidzIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSAgICAge0FycmF5fSBbcGFyYW1zXSAtIFBhcmFtZXRlciB0byBjcmVhdGUgYW4gZXJyb3IgbWVzc2FnZS5cbiAgICogQHRocm93cyAgICB7VHlwZUVycm9yfSBJZiB0aGUgbWVzc2FnZSBpcyBub3Qgb2YgdHlwZSBzdHJpbmcuXG4gICAqIEBleGFtcGxlIGNvbnN0IEVSUk9SID0gbmV3IE1vbnRoRXJyb3IoJ2N1cnJlbnQgb3B0aW9uIG11c3QgYmUgYSBEYXRlJyk7XG4gICAqXG4gICAqIGNvbnN0IERZTkFNSUNfTUVTU0FHRSA9IHR5cGUgPT4gYGN1cnJlbnQgb3B0aW9uIG11c3QgYmUgYSAke3R5cGV9YDtcbiAgICogY29uc3QgRFlOQU1JQ19FUlJPUiA9IG5ldyBNb250aEVycm9yKERZTkFNSUNfTUVTU0FHRSwgWydEYXRlJ10pO1xuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IobWVzc2FnZSwgcGFyYW1zKSB7XG4gICAgY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nO1xuICAgIGNvbnN0ICRtZXNzYWdlID0gaXNGdW5jdGlvbiA/IG1lc3NhZ2UuYXBwbHkobWVzc2FnZSwgcGFyYW1zKSA6IG1lc3NhZ2U7XG4gICAgaWYgKHR5cGVvZiAkbWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Vycm9yIG1lc3NhZ2UgbXVzdCBiZSBzdHJpbmcnKTtcbiAgICB9XG4gICAgc3VwZXIoJG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdNb250aEVycm9yJztcbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIE1vbnRoRXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbGwgbWVzc2FnZXMgZm9yIHNwZWNpZmljIGVycm9ycyBvZiB0aGUgbW9udGggY2xhc3MuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlcm9mIE1vbnRoRXJyb3JcbiAgICovXG4gIHN0YXRpYyBtZXNzYWdlcyA9IHtcbiAgICBUWVBFX0NVUlJFTlRfT1BUSU9OOiAnQ3VycmVudCBvcHRpb24gbXVzdCBiZSBhIERhdGUnLFxuICAgIFRZUEVfREFURUJPT0tfT1BUSU9OOiAnRGF0ZWJvb2sgb3B0aW9uIG11c3QgYmUgYW4gQXJyYXknLFxuICAgIElOVkFMSURfV0VFS0VORF9PUFRJT046ICdXZWVrZW5kIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gMCB0byAxMiBvciBhIHN0cmluZyB0aGF0IG1hdGNoIHRoZSByZWdleCAvXlswLTFdezd9JC8nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZXR0aWVyL3ByZXR0aWVyXG4gICAgSU5WQUxJRF9EQVRFQk9PS19TQ0hFTUE6IFwiU29tZSBkYXRlYm9vaydzIGVsZW1lbnQgaGFzIGludmFsaWQgc2NoZW1hXCIsXG4gIH07XG59XG5cbi8vIOKUgeKUgVx0RVhQT1JUIE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRoRXJyb3I7XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZXMgaXNWYWxpZCBtb2R1bGUsIHVzZWQgdG8gY2hlY2sgdGhlIG9wdGlvbnMgb2YgdGhlIGNvbnN0cnVjdG9yXG4gKiBtZXRob2Qgb2YgdGhlIGNsYXNzIE1vbnRoLlxuICovXG5cbi8vIOKUgeKUgVx0SU1QT1JUIE1PRFVMRVNcdOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8vIOKUgeKUgVx0Q09OU1RBTlRTXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gY2hlY2sgdGhlIHBhdHRlcm4gb2YgdGhlIHdlZWtlbmQgb3B0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCByZWdleFdlZWtlbmQgPSAvXlswLTFdezd9JC87XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gY2hlY2sgdGhlIHBhdHRlcm4gb2YgdGhlIGRhdGVib29rIGl0ZW0gb3B0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCByZWdleERhdGUgPSAvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9LztcblxuLyoqXG4gKiBBcnJheSBjb250YWluaW5nIGFsbCBhbGxvd2VkIHR5cGVzIG9mIHBsYW5uZWQgZGF0ZXMgaW4gZGF0ZWJvb2sgcGxhbnMuXG4gKlxuICogQHR5cGUge0FycmF5LjxzdHJpbmc+fVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgdHlwZXMgPSBbJ3Rhc2snLCAnZXZlbnQnLCAnYXBwb2ludG1lbnQnLCAnbWVldGluZyddO1xuXG4vLyDilIHilIFcdEZVTkNUSU9OU1x04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSAnaXNWYWxpZFBsYW4oKScgZnVuY3Rpb24gcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZSwgdmFsaWRhdGVzIGlmIGFuIG9iamVjdFxuICogZm9sbG93cyBhIHNjaGVtYS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge29iamVjdH0gcGxhbiAtIEEgb2JqZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYW4gdmFsaWQgb2JqZWN0IHNjaGVtYTsgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICogQGV4YW1wbGUgY29uc3QgaXNWYWxpZCA9IGlzVmFsaWREYXRlYm9va0l0ZW0oe1xuICogICBkYXRlOiAnMjAyMS0wMS0xNScsXG4gKiAgIHRpdGxlOiBcIk1vbSdzIGJpcnRoZGF5XCIsXG4gKiAgIGRlc2NyaXB0aW9uOiBcIk1vbSdzIGJpcnRoZGF5XCIsXG4gKiAgIGhvbGlkYXk6IGZhbHNlLFxuICogICB0eXBlOiAnZXZlbnQnLFxuICogfSk7IC8vIGV4cGVjdGVkIHZhbHVlIHRydWVcbiAqXG4gKi9cbmNvbnN0IGlzVmFsaWRQbGFuID0gcGxhbiA9PiB7XG4gIGlmICghdXRpbHMuaXNPYmplY3QocGxhbikpIHJldHVybiBmYWxzZTtcbiAgaWYgKCEoJ2RhdGUnIGluIHBsYW4pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghKCd0aXRsZScgaW4gcGxhbikpIHJldHVybiBmYWxzZTtcbiAgaWYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBwbGFuKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoISgnaG9saWRheScgaW4gcGxhbikpIHJldHVybiBmYWxzZTtcbiAgaWYgKCEoJ3R5cGUnIGluIHBsYW4pKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyhwbGFuLmRhdGUpKSByZXR1cm4gZmFsc2U7XG4gIGlmICghdXRpbHMuaXNTdHJpbmcocGxhbi50aXRsZSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKCF1dGlscy5pc1N0cmluZyhwbGFuLmRlc2NyaXB0aW9uKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIXV0aWxzLmlzU3RyaW5nKHBsYW4udHlwZSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKCF1dGlscy5pc0Jvb2xlYW4ocGxhbi5ob2xpZGF5KSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICghcmVnZXhEYXRlLnRlc3QocGxhbi5kYXRlKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoTnVtYmVyLmlzTmFOKERhdGUucGFyc2UocGxhbi5kYXRlKSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKERhdGUucGFyc2UocGxhbi5kYXRlKSA8PSAwKSByZXR1cm4gZmFsc2U7XG4gIGlmICghdHlwZXMuaW5jbHVkZXMocGxhbi50eXBlKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChwbGFuLnRpdGxlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuICBpZiAocGxhbi5kZXNjcmlwdGlvbi5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyDilIHilIFcdE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgaXNWYWxpZFdlZWtlbmQoKWAgZnVuY3Rpb24gcmV0dXJucyBhIGJvb2xlYW4gdmFsdWUuIERldGVybWluZXMgd2hldGhlciB0aGVcbiAqIHBhc3NlZCB2YWx1ZSBpcyBhbiB2YWxpZCB3ZWVrZW5kIHZhbHVlIGZvciB0aGUgYGdldFdlZWtlbmRzKClgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7bnVtYmVyfHN0cmluZ30gd2Vla2VuZCAtIFRoZSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgYW4gdmFsaWQgd2Vla2VuZCBvcHRpb247IG90aGVyd2lzZSwgYGZhbHNlYC5cbiAqIEBleGFtcGxlIGNvbnN0IGlzVmFsaWQgPSBpc1ZhbGlkV2Vla2VuZCgxKTsgLy8gZXhwZWN0ZWQgdmFsdWUgdHJ1ZVxuICpcbiAqL1xuY29uc3QgaXNWYWxpZFdlZWtlbmQgPSB3ZWVrZW5kID0+IHtcbiAgY29uc3QgaXNCeU51bWJlciA9IHV0aWxzLmlzSW50TnVtYmVyKHdlZWtlbmQpICYmIHdlZWtlbmQgPj0gMCAmJiB3ZWVrZW5kIDw9IDE1O1xuICBjb25zdCBpc0J5UGF0dGVybiA9IHJlZ2V4V2Vla2VuZC50ZXN0KHdlZWtlbmQpO1xuICByZXR1cm4gaXNCeU51bWJlciB8fCBpc0J5UGF0dGVybjtcbn07XG5cbi8qKlxuICogVGhlIGBpc1ZhbGlkRGF0ZWJvb2soKWAgZnVuY3Rpb24gcmV0dXJucyBhIGJvb2xlYW4gdmFsdWUuIERldGVybWluZXMgaWYgYWxsXG4gKiB0aGUgdmFsdWVzIG9mIGEgcGFzc2VkIGFycmF5IGFyZSB2YWxpZC5cbiAqXG4gKiBAcGFyYW0gICAgIHtBcnJheS48b2JqZWN0Pn0gcGxhbnMgLSBBbiBvYmplY3QgYXJyYXkuXG4gKiBAcmV0dXJucyAgIHtib29sZWFufSBgdHJ1ZWAgaWYgYWxsIGFycmF5IGVsZW1lbnRzIGlzIGFuIHZhbGlkIG9iamVjdCBzY2hlbWE7IG90aGVyd2lzZSwgYGZhbHNlYC5cbiAqIEBwcml2YXRlXG4gKiBAZXhhbXBsZSBjb25zdCBpc1ZhbGlkID0gaXNWYWxpZERhdGVib29rSXRlbXMoaXRlbSk7XG4gKlxuICovXG5jb25zdCBpc1ZhbGlkRGF0ZWJvb2sgPSBwbGFucyA9PiBwbGFucy5tYXAocGxhbiA9PiBpc1ZhbGlkUGxhbihwbGFuKSkuZXZlcnkoaXRlbSA9PiBpdGVtID09PSB0cnVlKTtcblxuLy8g4pSB4pSBXHRFWFBPUlQgTU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbmV4cG9ydHMud2Vla2VuZCA9IGlzVmFsaWRXZWVrZW5kO1xuZXhwb3J0cy5kYXRlYm9vayA9IGlzVmFsaWREYXRlYm9vaztcbiIsIi8qKlxuICogQGZpbGUgTWFuYWdlcyByZWFkb25seSBtb2R1bGUsIHVzZWQgdG8gY3JlYXRlIHRoZSByZWFkLW9ubHkgcHJvcGVydGllcyBmb3JcbiAqIHRoZSBjbGFzcyBNb250aC5cbiAqL1xuXG4vLyDilIHilIFcdElNUE9SVCBNT0RVTEVTXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vLyDilIHilIFcdENPTlNUQU5UU1x04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIEEgTWFwIG9iamVjdCB0aGF0IHN0b3JlcyB0aGUgdmFsaWQgcGF0dGVybnMgZm9yIHRoZSBgZ2V0UGF0dGVybigpYCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUge01hcDxudW1iZXIsIHN0cmluZz59XG4gKi9cbmNvbnN0IG1hcFdlZWtlbmQgPSBuZXcgTWFwKFtcbiAgWzAsICcwMDAwMDExJ10sIC8vICAwMCBTYXR1cmRheSwgU3VuZGF5XG4gIFsxLCAnMTAwMDAwMSddLCAvLyAgMDEgU3VuZGF5LCBNb25kYXlcbiAgWzIsICcxMTAwMDAwJ10sIC8vICAwMiBNb25kYXksIFR1ZXNkYXlcbiAgWzMsICcwMTEwMDAwJ10sIC8vICAwMyBUdWVzZGF5LCBXZWRuZXNkYXlcbiAgWzQsICcwMDExMDAwJ10sIC8vICAwNCBXZWRuZXNkYXksIFRodXJzZGF5XG4gIFs1LCAnMDAwMTEwMCddLCAvLyAgMDUgVGh1cnNkYXksIEZyaWRheVxuICBbNiwgJzAwMDAxMTAnXSwgLy8gIDA2IEZyaWRheSwgU2F0dXJkYXlcbiAgWzcsICcwMDAwMDAxJ10sIC8vICAwNyBTdW5kYXlcbiAgWzgsICcxMDAwMDAwJ10sIC8vICAwOCBNb25kYXlcbiAgWzksICcwMTAwMDAwJ10sIC8vICAwOSBUdWVzZGF5XG4gIFsxMCwgJzAwMTAwMDAnXSwgLy8gMTAgV2VkbmVzZGF5XG4gIFsxMSwgJzAwMDEwMDAnXSwgLy8gMTEgVGh1cnNkYXlcbiAgWzEyLCAnMDAwMDEwMCddLCAvLyAxMiBGcmlkYXlcbiAgWzEzLCAnMDAwMDAxMCddLCAvLyAxMyBTYXR1cmRheVxuICBbMTQsICcwMDAwMDAxJ10sIC8vIDE0IFN1bmRheVxuICBbMTUsICcwMDAwMDAwJ10sIC8vIDE1IE5vbmVcbl0pO1xuXG4vKipcbiAqIEFycmF5IHdpdGggbnVtZXJpYyBlbGVtZW50cy4gVGhlIG51bWJlcnMgcmVwcmVzZW50cyB0aGUgZGF5cyBvZiB0aGUgd2VlayxcbiAqIHdoZXJlIDAgcmVwcmVzZW50cyBTdW5kYXksIGxpa2UgYERhdGUucHJvdG90eXBlLmdldERheSgpYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICovXG5jb25zdCB3ZWVrZGF5cyA9IFsxLCAyLCAzLCA0LCA1LCA2LCAwXTtcblxuLy8g4pSB4pSBXHRGVU5DVElPTlNcdOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVxuLyoqXG4gKiBUaGUgYGdldFBhdHRlcm4oKWAgZnVuY3Rpb24gcmV0dXJucyBhIGBzdHJpbmdgIHJlcHJlc2VudGluZyB0aGUgZGF5cyB0aGF0IGFyZVxuICogd2Vla2VuZHMuIFRoZSBzdHJpbmcgY29udGFpbnMgb25seSAwIG9yIDEgYW5kIGxlbmd0aCA3IHdoZXJlIDAgYXJlIHRoZVxuICogd29ya2RheXMgYW5kIDEgdGhlIHdlZWtlbmRzLlxuICpcbiAqIGB2YWx1ZWAgbXVzdCBiZSBhIGBzdHJpbmdgIG9yIGludGVnZXIgYG51bWJlcmAgYmV0d2VlbiAwIHRvIDE1LiBJZiBhIGBzdHJpbmdgXG4gKiBpcyBwYXNzZWQsIHRoZSBzdHJpbmcgbXVzdCBtYXRjaCB0byByZWdleCBgL15bMC0xXXs3fSQvYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgICB7bnVtYmVyfHN0cmluZ30gdmFsdWUgLSBBIHZhbGlkIHdlZWtlbmQgb3B0aW9uLlxuICogQHJldHVybnMgICB7c3RyaW5nfSBBIGBzdHJpbmdgIHJlcHJlc2VudGluZyB0aGUgZGF5cyBvZiB0aGUgd2Vlay5cbiAqIEBleGFtcGxlIGNvbnN0IHBhdHRlcm4gPSBnZXRQYXR0ZXJuKDEpOyAvLyBleHBlY3RlZCB2YWx1ZSAnMTAwMDAwMSdcbiAqXG4gKiBAZXhhbXBsZSBjb25zdCBwYXR0ZXJuID0gZ2V0UGF0dGVybigyKTsgLy8gZXhwZWN0ZWQgdmFsdWUgJzEyMDAwMDAnXG4gKiBjb25zdCBQQVRURVJOXzAyID0gZ2V0UGF0dGVybigyKTsgLy8gZXhwZWN0ZWQgdmFsdWUgJzExMDAwMDAnXG4gKiBjb25zdCBQQVRURVJOXzAzID0gZ2V0UGF0dGVybigwKTsgLy8gZXhwZWN0ZWQgdmFsdWUgJzAwMDAwMDAnXG4gKlxuICovXG5jb25zdCBnZXRQYXR0ZXJuID0gdmFsdWUgPT4ge1xuICBjb25zdCBpc0J5TnVtYmVyID0gdXRpbHMuaXNJbnROdW1iZXIodmFsdWUpICYmIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMTQ7XG4gIGlmIChpc0J5TnVtYmVyKSByZXR1cm4gbWFwV2Vla2VuZC5nZXQodmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vLyDilIHilIFcdE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgY3JlYXRlWVlNTUREKClgIGZ1bmN0aW9uIHJldHVybnMgZnJvbSBhbiBpbnN0YW5jZSBvZiBgRGF0ZWAgYSBudW1iZXJcbiAqIGFycmF5IHdpdGggdGhyZWUgZWxlbWVudHMuIFRoZSBhcnJheSBlbGVtZW50cyByZXByZXNlbnQgdGhlIHllYXIgbnVtYmVyLFxuICogbW9udGggbnVtYmVyIGFuZCBkYXkgbnVtYmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7RGF0ZX0gZGF0ZSAtIEFuIGluc3RhbmNlIGBEYXRlYC5cbiAqIEByZXR1cm5zIHtBcnJheS48bnVtYmVyPn0gQSBudW1iZXIgYGFycmF5YCB3aXRoIHRocmVlIGVsZW1lbnRzLlxuICogQGV4YW1wbGUgY29uc3QgWVlNTUREID0gY3JlYXRlWVlNTUREKG5ldyBEYXRlKDIwMjAsIDEsIDEyKSk7XG4gKiBjb25zdCBbWUVBUiwgTU9OVEgsIERBWV0gPSBZWU1NREQ7IC8vIGV4cGVjdGVkIHZhbHVlIFsyMDIwLCAxLCAxMl1cbiAqXG4gKi9cbmNvbnN0IGNyZWF0ZVlZTU1ERCA9IGRhdGUgPT4gW2RhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKV07XG5cbi8qKlxuICogVGhlIGBjcmVhdGVXZWVrZW5kcygpYCBmdW5jdGlvbiByZXR1cm5zIGEgbnVtYmVyIGBhcnJheWAuIFRoZSBhcnJheSBlbGVtZW50c1xuICogcmVwcmVzZW50IGRheXMgb2YgdGhlIHdlZWsgdGhhdCBhcmUgbm90IHdvcmtpbmcgZGF5cyBhbmQgdGFrZXMgYXMgd2Vla2VuZC5cbiAqIFdoZXJlIDAgcmVwcmVzZW50cyBTdW5kYXkgYW5kIDEgbW9uZGF5LCBsaWtlIGFzIGBEYXRlLnByb3RvdHlwZS5nZXREYXkoKWAuXG4gKlxuICogVGhlIGBvcHRpb25gIHBhcmFtZXRlciBtdXN0IGJlIGFuIGludGVnZXIgbnVtYmVyIGJldHdlZW4gMCBhbmQgMTUgb3IgYVxuICogYHN0cmluZ2AgdGhhdCBtYXRjaCB0aGUgcmVnZXggYC9eWzAtMV17N30kL2AgKGUuZy4gJzAwMDAwMDEnKS4gVGhlIGZpcnN0XG4gKiBkaWdpdCBpbiB0aGUgc3RyaW5nIHJlcHJlc2VudHMgTW9uZGF5IGFuZCB0aGUgbGFzdCBkaWdpdCByZXByZXNlbnRzIFN1bmRheS5cbiAqIFRoZSB6ZXJvcyByZXByZXNlbnQgdGhlIHdvcmtpbmcgZGF5cyBhbmQgdGhlIG9uZXMgcmVwcmVzZW50IHRoZSBub24td29ya2luZ1xuICogZGF5cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge251bWJlcnxzdHJpbmd9IG9wdGlvbiAtIEEgdmFsaWQgd2Vla2VuZCBvcHRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXkuPG51bWJlcj59IEEgbnVtYmVyIGFycmF5LlxuICogQGV4YW1wbGUgY29uc3Qgd2Vla2VuZCA9IGNyZWF0ZVdlZWtlbmQoMSk7IC8vIGV4cGVjdGVkIHZhbHVlIFswLCA2XVxuICpcbiAqL1xuY29uc3QgY3JlYXRlV2Vla2VuZCA9IG9wdGlvbiA9PiB7XG4gIGNvbnN0IHBhdHRlcm4gPSBnZXRQYXR0ZXJuKG9wdGlvbik7XG4gIGNvbnN0IGNoYXJzID0gcGF0dGVybi5zcGxpdCgnJyk7XG4gIHJldHVybiB3ZWVrZGF5cy5yZWR1Y2UoKGFjYywgY3VyciwgaWR4KSA9PiAoY2hhcnNbaWR4XSA9PT0gJzEnID8gWy4uLmFjYywgY3Vycl0gOiBhY2MpLCBbXSk7XG59O1xuXG4vKipcbiAqIFRoZSBgY3JlYXRlU0NFKClgIGZ1bmN0aW9uIHJldHVybnMgYSBudW1iZXIgYGFycmF5YCB3aXRoIHRocmVlIGVsZW1lbnRzIGZyb21cbiAqIGFub3RoZXIgbnVtYmVyIGBhcnJheWAuIFRoZSBhcnJheSBlbGVtZW50cyByZXByZXNlbnQgb25lIGRheSBvZiB0aGUgbW9udGgsXG4gKiB0aGUgZGF5IG1vbnRoIHN0YXJ0LCB0aGUgZGF5IG1vbnRoIGN1cnJlbnQgYW5kIHRoZSBkYXkgbW9udGggZW5kLCBpdHMgdmFsdWVcbiAqIGlzIGxpa2UgYERhdGUucHJvdG90eXBlLmdldERhdGUoKWAuXG4gKlxuICogVGhlIGBZWU1NRERgIHBhcmFtIG11c3QgYmUgYSBudW1iZXIgYGFycmF5YCB3aXRoIHRocmVlIGVsZW1lbnRzLiBUaGUgYXJyYXlcbiAqIGVsZW1lbnRzIHJlcHJlc2VudCB0aGUgeWVhciBudW1iZXIsIG1vbnRoIG51bWJlciBhbmQgZGF5IG51bWJlciBgW1lZLCBNTSwgRERdYC5cbiAqXG4gKiBAcGFyYW0gICAgIHtBcnJheS48bnVtYmVyPn0gWVlNTUREIC0gQSBudW1iZXIgYXJyYXkgd2l0aCB0aHJlZSBlbGVtZW50cy5cbiAqIEByZXR1cm5zICAge0FycmF5LjxudW1iZXI+fSBBIG51bWJlciBhcnJheSB3aXRoIHRocmVlIGVsZW1lbnRzLlxuICogQHByaXZhdGVcbiAqIEBleGFtcGxlIGNvbnN0IFNDRSA9IGNyZWF0ZVNDRShbMjAyMSwgMCwgMTVdKTsgLy8gZXhwZWN0ZWQgdmFsdWUgWzEsIDE1LCAzMV1cbiAqXG4gKi9cbmNvbnN0IGNyZWF0ZVNDRSA9IFlZTU1ERCA9PiB7XG4gIGNvbnN0IFtZWSwgTU0sIEREXSA9IFlZTU1ERDtcbiAgcmV0dXJuIFsxLCBERCwgbmV3IERhdGUoWVksIE1NICsgMSwgMCkuZ2V0RGF0ZSgpXTtcbn07XG5cbi8vIOKUgeKUgVx0RVhQT1JUIE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG5leHBvcnRzLmNyZWF0ZVlZTU1ERCA9IGNyZWF0ZVlZTU1ERDtcbmV4cG9ydHMuY3JlYXRlV2Vla2VuZCA9IGNyZWF0ZVdlZWtlbmQ7XG5leHBvcnRzLmNyZWF0ZVNDRSA9IGNyZWF0ZVNDRTtcbiIsIi8qKlxuICogQGZpbGUgTWFuYWdlcyB1dGlscyBtb2R1bGUsIHVzZWQgdG8gY2hlY2sgdGhlIHR5cGVzIG9mIHZhbHVlcyBnaXZlbi5cbiAqL1xuXG4vLyDilIHilIFcdENPTlNUQU5UU1x04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCByZWdleCA9IC9cXHMoW2EtenxBLVpdKykvO1xuXG4vLyDilIHilIFcdEZVTkNUSU9OU1x04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgdG9TdHJpbmcoKWAgbWV0aG9kIHJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvYmplY3QuXG4gKiBAZXhhbXBsZSBjb25zdCB0b3N0cmluZyA9IHRvU3RyaW5nKHRydWUpOyAvLyBbb2JqZWN0IEJvb2xlYW5dO1xuICpcbiAqL1xuY29uc3QgdG9TdHJpbmcgPSB2YWx1ZSA9PiAoe30udG9TdHJpbmcuY2FsbCh2YWx1ZSkpO1xuXG4vKipcbiAqIFRoZSBgdG9UeXBlKClgIG1ldGhvZCByZXR1cm5zIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgdGhlIHVuZXZhbHVhdGVkXG4gKiBvcGVyYW5kLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgY2hlY2tlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0eXBlIG9mIHRoZSB1bmV2YWx1YXRlZCBvcGVyYW5kLlxuICogQGV4YW1wbGUgdG9UeXBlKHRydWUpOyAvLyAnYm9vbGVhbic7XG4gKlxuICovXG5jb25zdCB0b1R5cGUgPSB2YWx1ZSA9PiB0b1N0cmluZyh2YWx1ZSkubWF0Y2gocmVnZXgpWzFdLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG5cbi8vIOKUgeKUgVx0TU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogVGhlIGBpc0FycmF5KClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIEFycmF5IG9yIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgeyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBBcnJheTsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIEBleGFtcGxlIGlzQXJyYXkoWzEsIDJdKTsgLy8gdHJ1ZVxuICpcbiAqL1xuY29uc3QgaXNBcnJheSA9IHZhbHVlID0+IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuXG4vKipcbiAqIFRoZSBgaXNCb29sZWFuKClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIEJvb2xlYW4gb3Igbm90LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgdGVzdGVkLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIEJvb2xlYW47IG90aGVyd2lzZSwgZmFsc2UuXG4gKiBAZXhhbXBsZSBpc0Jvb2xlYW4odHJ1ZSk7IC8vIHRydWU7XG4gKlxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB2YWx1ZSA9PiB0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEJvb2xlYW5dJztcblxuLyoqXG4gKiBUaGUgYGlzRGF0ZSgpYCBmdW5jdGlvbiBkZXRlcm1pbmVzIHdoZXRoZXIgYSB2YWx1ZSBpcyBpbnN0YW5jZSBvZiBEYXRlIG9yIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgeyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBEYXRlOyBvdGhlcndpc2UsIGZhbHNlLlxuICogQGV4YW1wbGUgaXNEYXRlKG5ldyBEYXRlKCkpOyAvLyB0cnVlO1xuICpcbiAqL1xuY29uc3QgaXNEYXRlID0gdmFsdWUgPT4gdG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG5cbi8qKlxuICogVGhlIGBpc0Z1bmN0aW9uKClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIEZ1bmN0aW9uIG9yIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgeyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyBGdW5jdGlvbjsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIEBleGFtcGxlIGlzRnVuY3Rpb24oKCkgPT4ge30pOyAvLyB0cnVlO1xuICpcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHZhbHVlID0+IHRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxuLyoqXG4gKiBUaGUgYGlzTnVtYmVyKClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIE51bWJlciBvciBub3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSB0ZXN0ZWQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgTnVtYmVyOyBvdGhlcndpc2UsIGZhbHNlLlxuICogQGV4YW1wbGUgaXNOdW1iZXIoMSk7IC8vIHRydWU7XG4gKlxuICovXG5jb25zdCBpc051bWJlciA9IHZhbHVlID0+IHRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG5cbi8qKlxuICogVGhlIGBpc0Zsb2F0TnVtYmVyKClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIEZsb2F0IE51bWJlclxuICogb3Igbm90LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgdGVzdGVkLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIEZsb2F0IE51bWJlcjsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIEBleGFtcGxlIGlzRmxvYXROdW1iZXIoMS4zKTsgLy8gdHJ1ZTtcbiAqXG4gKi9cbmNvbnN0IGlzRmxvYXROdW1iZXIgPSB2YWx1ZSA9PiB0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTtcblxuLyoqXG4gKiBUaGUgYGlzSW50TnVtYmVyKClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIEludGVyZ2VyIE51bWJlclxuICogb3Igbm90LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgdGVzdGVkLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIEludGVyZ2VyIE51bWJlcjsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIEBleGFtcGxlIGlzSW50TnVtYmVyKDEuNCk7IC8vIGZhbHNlO1xuICpcbiAqL1xuY29uc3QgaXNJbnROdW1iZXIgPSB2YWx1ZSA9PiB0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmIE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuXG4vKipcbiAqIFRoZSBgaXNTdHJpbmcoKWAgZnVuY3Rpb24gZGV0ZXJtaW5lcyB3aGV0aGVyIGEgdmFsdWUgaXMgU3RyaW5nIG9yIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgeyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBTdHJpbmc7IG90aGVyd2lzZSwgZmFsc2UuXG4gKiBAZXhhbXBsZSBpc1N0cmluZygnSGVsbG8gd29ybGQnKTsgLy8gdHJ1ZTtcbiAqXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqXG4gKiBUaGUgYGlzT2JqZWN0KClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIE9iamVjdCBvciBub3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSB0ZXN0ZWQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgT2JqZWN0OyBvdGhlcndpc2UsIGZhbHNlLlxuICogQGV4YW1wbGUgaXNPYmplY3QoeyBjb2xvcjogJ2JsdWUnIH0pOyAvLyB0cnVlO1xuICpcbiAqL1xuY29uc3QgaXNPYmplY3QgPSB2YWx1ZSA9PiB0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKipcbiAqIFRoZSBgaXNOdWxsT2JqZWN0KClgIGZ1bmN0aW9uIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIE9iamVjdCB3aXRob3V0XG4gKiBjb25zdHJ1Y3RvciBvciBub3QuIEZvciBleGFtcGxlIGBPYmplY3QuY3JlYXRlKG51bGwpYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgeyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBPYmplY3Qgd2l0aG91dCBjb25zdHJ1Y3RvciBvciBub3Q7IG90aGVyd2lzZSwgZmFsc2UuXG4gKiBAZXhhbXBsZSBpc051bGxPYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7IC8vIHRydWU7XG4gKlxuICovXG5jb25zdCBpc051bGxPYmplY3QgPSB2YWx1ZSA9PiBpc09iamVjdCh2YWx1ZSkgJiYgIU9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG5cbi8qKlxuICogVGhlIGBpc1BPSk8oKWAgZnVuY3Rpb24gZGV0ZXJtaW5lcyB3aGV0aGVyIGEgdmFsdWUgaXMgUE9KTyAoUGxhaW4gT2xkIEphdmEgT2JqZWN0KVxuICogb3Igbm90LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgdGVzdGVkLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIFBPSk87IG90aGVyd2lzZSwgZmFsc2UuXG4gKiBAZXhhbXBsZSBpc1BPSk8oeyBhZ2U6IDMgfSk7IC8vIHRydWU7XG4gKlxuICovXG5jb25zdCBpc1BPSk8gPSB2YWx1ZSA9PlxuICBpc09iamVjdCh2YWx1ZSkgJiZcbiAgKGlzTnVsbE9iamVjdCh2YWx1ZSkgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnT2JqZWN0Jyk7XG5cbi8qKlxuICogVGhlIGBpc0VtcHR5QXJyYXkoKWAgZnVuY3Rpb24gZGV0ZXJtaW5lcyB3aGV0aGVyIGEgdmFsdWUgaXMgYW4gRW1wdHkgQXJyYXlcbiAqIG9yIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAgeyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHRlc3RlZC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyBlbXB0eSBBcnJheTsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIEBleGFtcGxlIGlzRW1wdHlBcnJheShbXSk7IC8vIHRydWVcbiAqXG4gKi9cbmNvbnN0IGlzRW1wdHlBcnJheSA9IHZhbHVlID0+IEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcblxuLyoqXG4gKiBUaGUgYGlzRW1wdHlPYmplY3QoKWAgZnVuY3Rpb24gZGV0ZXJtaW5lcyB3aGV0aGVyIGEgdmFsdWUgaXMgYW4gRW1wdHkgT2JqZWN0XG4gKiBvciBub3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSB0ZXN0ZWQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgRW1wdHkgT2JqZWN0OyBvdGhlcndpc2UsIGZhbHNlLlxuICogQGV4YW1wbGUgaXNFbXB0eU9iamVjdCh7fSk7IC8vIHRydWVcbiAqXG4gKi9cbmNvbnN0IGlzRW1wdHlPYmplY3QgPSB2YWx1ZSA9PiBpc09iamVjdCh2YWx1ZSkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLmxlbmd0aCA9PT0gMDtcblxuLyoqXG4gKiBUaGUgYGlzQXJyYXlPZigpYCBmdW5jdGlvbiBkZXRlcm1pbmVzIHdoZXRoZXIgYSB2YWx1ZSBpcyBhbiBgQXJyYXlgIHdpdGhcbiAqIGNvbnRhaW5zIHR5cGVzIG9mIHZhbHVlIG9yIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge0FycmF5fSBhcnJheSAtIFRoZSBgQXJyYXlgIHRvIGJlIHRlc3RlZC5cbiAqIEBwYXJhbSAgIHtBcnJheS48c3RyaW5nPn0gdHlwZXMgLSBUaGUgZXhwZWN0ZWQgdHlwZXMgb2YgdmFsdWUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbGwgYXJyYXkgZWxlbWVudHMgYXJlIHRoZSBleHBlY3RlZCB0eXBlczsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIEBleGFtcGxlIGlzQXJyYXlPZihbMSwgMiwgM10sIFsnbnVtYmVycyddKTsgLy8gdHJ1ZVxuICpcbiAqL1xuY29uc3QgaXNBcnJheU9mID0gKGFycmF5LCB0eXBlcykgPT5cbiAgYXJyYXkubWFwKGl0ZW0gPT4gdHlwZXMuaW5jbHVkZXModG9UeXBlKGl0ZW0pKSkuZXZlcnkoaXRlbSA9PiAhIWl0ZW0pO1xuXG4vKipcbiAqIFRoZSBgaXNPYmplY3RPZigpYCBmdW5jdGlvbiBkZXRlcm1pbmVzIGRldGVybWluZXMgd2hldGhlciBhIHZhbHVlIGlzIGFuXG4gKiBgb2JqZWN0YCB3aXRoIGNvbnRhaW5zIHR5cGVzIG9mIHZhbHVlIG9yIG5vdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge29iamVjdH0gb2JqZWN0IC0gVGhlIGBPYmplY3RgIHRvIGJlIHRlc3RlZC5cbiAqIEBwYXJhbSAgIHtBcnJheS48c3RyaW5nPn0gdHlwZXMgLSBUaGUgZXhwZWN0ZWQgdHlwZXMgb2YgdmFsdWUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbGwgT2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBleHBlY3RlZCB0eXBlczsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAqIEBleGFtcGxlIGlzT2JqZWN0T2YoeyBhOiAxLCBiOiAyIH0sIFsnbnVtYmVycyddKTsgLy8gdHJ1ZVxuICpcbiAqL1xuY29uc3QgaXNPYmplY3RPZiA9IChvYmplY3QsIHR5cGVzKSA9PlxuICBPYmplY3Qua2V5cyhvYmplY3QpXG4gICAgLm1hcChrZXkgPT4gdHlwZXMuaW5jbHVkZXModG9UeXBlKG9iamVjdFtrZXldKSkpXG4gICAgLmV2ZXJ5KGl0ZW0gPT4gISFpdGVtKTtcblxuLy8g4pa2IElTIFRZUEVcbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcbmV4cG9ydHMuaXNGbG9hdE51bWJlciA9IGlzRmxvYXROdW1iZXI7XG5leHBvcnRzLmlzSW50TnVtYmVyID0gaXNJbnROdW1iZXI7XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5leHBvcnRzLmlzTnVsbE9iamVjdCA9IGlzTnVsbE9iamVjdDtcbmV4cG9ydHMuaXNQT0pPID0gaXNQT0pPO1xuZXhwb3J0cy5pc0VtcHR5QXJyYXkgPSBpc0VtcHR5QXJyYXk7XG5leHBvcnRzLmlzRW1wdHlPYmplY3QgPSBpc0VtcHR5T2JqZWN0O1xuZXhwb3J0cy5pc0FycmF5T2YgPSBpc0FycmF5T2Y7XG5leHBvcnRzLmlzT2JqZWN0T2YgPSBpc09iamVjdE9mO1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2VzIHRoZSBtb250aCBjbGFzcy5cbiAqL1xuXG4vLyDilIHilIFcdElNUE9SVCBNT0RVTEVTXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbmNvbnN0IE1vbnRoRXJyb3IgPSByZXF1aXJlKCcuL01vbnRoRXJyb3InKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi9oZWxwZXJzL3V0aWxzJyk7XG5jb25zdCBpc1ZhbGlkID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzVmFsaWQnKTtcbmNvbnN0IHJlYWRvbmx5ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3JlYWRvbmx5Jyk7XG5jb25zdCBjcmVhdGVQbGFubmVyID0gcmVxdWlyZSgnLi9zZXJ2aWNlcy9jcmVhdGVQbGFubmVyJyk7XG5jb25zdCBjcmVhdGVXZWVrZW5kcyA9IHJlcXVpcmUoJy4vc2VydmljZXMvY3JlYXRlV2Vla2VuZHMnKTtcbmNvbnN0IGNyZWF0ZUhvbGlkYXlzID0gcmVxdWlyZSgnLi9zZXJ2aWNlcy9jcmVhdGVIb2xpZGF5cycpO1xuY29uc3QgY3JlYXRlTm9uV29ya2RheXMgPSByZXF1aXJlKCcuL3NlcnZpY2VzL2NyZWF0ZU5vbldvcmtkYXlzJyk7XG5jb25zdCBjcmVhdGVEYXlzID0gcmVxdWlyZSgnLi9zZXJ2aWNlcy9jcmVhdGVEYXlzJyk7XG5jb25zdCBjcmVhdGVTdW1tYXJ5ID0gcmVxdWlyZSgnLi9zZXJ2aWNlcy9jcmVhdGVTdW1tYXJ5Jyk7XG5cbi8vIOKUgeKUgVx0VFlQRURFRlx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgd2Vla2VuZGAgb3B0aW9uIGluZGljYXRlcyB0aGUgZGF5cyBvZiB0aGUgd2VlayB0aGF0IGFyZSB0YWtlbiBhcyB0aGVcbiAqIHdlZWtlbmQgaW4gdGhlIG1vbnRoLlxuICpcbiAqIE11c3QgYmUgYSBgc3RyaW5nYCBvciBpbnRlZ2VyIGBudW1iZXJgIGJldHdlZW4gMCB0byAxNS4gSWYgYSBgc3RyaW5nYCBpc1xuICogcGFzc2VkLCB0aGUgc3RyaW5nIG11c3QgbWF0Y2ggdG8gcmVnZXggYC9eWzAtMV17N30kL2AuIEZvciBleGFtcGxlIGlmIHdhbnQgdG9cbiAqIGluZGljYXRlIHRoYXQgd2Vla2VuZHMgYXJlIEZyaWRheXMsIHRoZSB2YWx1ZSBtdXN0IGJlIGBcIjAwMDAxMDBcImAuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmIHsoc3RyaW5nfG51bWJlcil9IFdlZWtlbmRPcHRpb25cbiAqL1xuXG4vKipcbiAqIEFuIGFjdGl2aXR5IHNjaGVkdWxlZCBvbiBhIGRhdGVib29rLlxuICpcbiAqIEFuIGBPYmplY3RgIHRoYXQgY29udGFpbnMgdGhlIGRldGFpbHMgb2YgYSB0YXNrLCBldmVudCwgYXBwb2ludG1lbnQgb3JcbiAqIG1lZXRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGl2aXR5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlICAgICAgICAtIFNjaGVkdWxlZCBkYXRlIGZvciB0aGUgYWN0aXZpdHksIElTTyBmb3JtYXQgKElTTyA4NjAxKSBgXCJZWVlZLU1NLUREXCJgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgICAgICAgLSBBY3Rpdml0eSB0aXRsZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uIC0gQWN0aXZpdHkgZGVzY3JpcHRpb24uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xpZGF5ICAgICAtIElmIHRoZSBhY3Rpdml0eSBpcyB0YWtlbiBhcyBhIGhvbGlkYXkuXG4gKiBAcHJvcGVydHkgeyd0YXNrJ3wnZXZlbnQnfCdhcHBvaW50bWVudCd8J21lZXRpbmcnfSB0eXBlICAgICAgICAtIEFjdGl2aXR5IHR5cGUsIGFsbG93ZWQgdmFsdWVzIGFyZSBgdGFza2AsIGBldmVudGAsIGBhcHBvaW50bWVudGAsIGBtZWV0aW5nYC5cbiAqL1xuXG4vKipcbiAqIFRoZSBgZGF0ZWJvb2tgIG9wdGlvbiBpcyBhIGNvbGxlY3Rpb24gb2Ygc2NoZWR1bGVkIGFjdGl2aXRpZXMuXG4gKlxuICogTXVzdCBiZSBhbiBvYmplY3QgYGFycmF5YCwgZXZlcnkgb2JqZWN0IG11c3QgaGF2ZSB0aGUgcHJvcGVydGllcyBgZGF0ZWAsXG4gKiBgdGl0bGVgLCBgZGVzY3JpcHRpb25gLCBgaG9saWRheWAgYW5kIGB0eXBlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGVkZWYge0FycmF5LjxBY3Rpdml0eT59IERhdGVib29rXG4gKi9cblxuLyoqXG4gKiBBIHRhc2stdHlwZSBzY2hlZHVsZWQgYWN0aXZpdHkuXG4gKlxuICogQW4gYE9iamVjdGAgd2l0aCB0aGUgcHJvcGVydGllcyBgZGF0ZWAsIGB0aXRsZWAsIGBkZXNjcmlwdGlvbmAsIGBob2xpZGF5YCwgYHR5cGVgLCBhbmQgYFlZTU1ERGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSAgICAgICAgIFRhc2tcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgICAgICAgIGRhdGUgICAgICAgIC0gU2NoZWR1bGVkIGRhdGUgZm9yIHRoZSB0YXNrIGBcIllZWVktTU0tRERcImAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICB0aXRsZSAgICAgICAtIFRhc2sgdGl0bGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICBkZXNjcmlwdGlvbiAtIFRhc2sgZGVzY3JpcHRpb24uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICAgICAgICBob2xpZGF5ICAgICAtIElmIHRoZSB0YXNrIGlzIHRha2VuIGFzIGEgaG9saWRheS5cbiAqIEBwcm9wZXJ0eSB7J3Rhc2snfSAgICAgICAgIHR5cGUgICAgICAgIC0gVHlwZSBvZiBzY2hlZHVsZWQgYWN0aXZpdHkgYHRhc2tgLlxuICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPn0gWVlNTUREICAgICAgLSBTY2hlZHVsZWQgZGF0ZSBmb3IgdGhlIHRhc2sgYFtZWSwgTU0sIEREXWAuXG4gKi9cblxuLyoqXG4gKiBBbiBldmVudC10eXBlIHNjaGVkdWxlZCBhY3Rpdml0eS5cbiAqXG4gKiBBbiBgT2JqZWN0YCB0aGF0IGNvbnRhaW5zIHRoZSBkZXRhaWxzIG9mIGFuIGV2ZW50LCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGBkYXRlYCxcbiAqIGB0aXRsZWAsIGBkZXNjcmlwdGlvbmAsIGBob2xpZGF5YCwgYHR5cGVgLCBhbmQgYFlZTU1ERGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSAgICAgICAgIEV2ZW50XG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICBkYXRlICAgICAgICAtIFNjaGVkdWxlZCBkYXRlIGZvciB0aGUgZXZlbnQgYFwiWVlZWS1NTS1ERFwiYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgICAgICAgIHRpdGxlICAgICAgIC0gRXZlbnQgdGl0bGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICBkZXNjcmlwdGlvbiAtIEV2ZW50IGRlc2NyaXB0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSAgICAgICAgaG9saWRheSAgICAgLSBJZiB0aGUgZXZlbnQgaXMgdGFrZW4gYXMgYSBob2xpZGF5LlxuICogQHByb3BlcnR5IHsnZXZlbnQnfSAgICAgICAgdHlwZSAgICAgICAgLSBUeXBlIG9mIHNjaGVkdWxlZCBhY3Rpdml0eSBgZXZlbnRgLlxuICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPn0gWVlNTUREICAgICAgLSBTY2hlZHVsZWQgZGF0ZSBmb3IgdGhlIGV2ZW50IGBbWVksIE1NLCBERF1gLlxuICovXG5cbi8qKlxuICogQW4gYXBwb2ludG1lbnQtdHlwZSBzY2hlZHVsZWQgYWN0aXZpdHkuXG4gKlxuICogQW4gYE9iamVjdGAgdGhhdCBjb250YWlucyB0aGUgZGV0YWlscyBvZiBhbiBhcHBvaW50bWVudCwgd2l0aCB0aGUgcHJvcGVydGllc1xuICogYGRhdGVgLCBgdGl0bGVgLCBgZGVzY3JpcHRpb25gLCBgaG9saWRheWAsIGB0eXBlYCwgYW5kIGBZWU1NRERgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdHlwZWRlZiAge29iamVjdH0gICAgICAgICBBcHBvaW50bWVudFxuICogQHByb3BlcnR5IHtzdHJpbmd9ICAgICAgICAgZGF0ZSAgICAgICAgLSBTY2hlZHVsZWQgZGF0ZSBmb3IgdGhlIGFwcG9pbnRtZW50IGBcIllZWVktTU0tRERcImAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICB0aXRsZSAgICAgICAtIEFwcG9pbnRtZW50IHRpdGxlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICAgICAgICAgZGVzY3JpcHRpb24gLSBBcHBvaW50bWVudCBkZXNjcmlwdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gICAgICAgIGhvbGlkYXkgICAgIC0gSWYgdGhlIGFwcG9pbnRtZW50IGlzIHRha2VuIGFzIGEgaG9saWRheS5cbiAqIEBwcm9wZXJ0eSB7J2FwcG9pbnRtZW50J30gIHR5cGUgICAgICAgIC0gVHlwZSBvZiBzY2hlZHVsZWQgYWN0aXZpdHkgYGFwcG9pbnRtZW50YC5cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj59IFlZTU1ERCAgICAgIC0gU2NoZWR1bGVkIGRhdGUgZm9yIHRoZSBhcHBvaW50bWVudCBgW1lZLCBNTSwgRERdYC5cbiAqL1xuXG4vKipcbiAqIEFuIG1lZXRpbmctdHlwZSBzY2hlZHVsZWQgYWN0aXZpdHkuXG4gKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGRldGFpbHMgb2YgYSBtZWV0aW5nLCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGBkYXRlYCxcbiAqIGB0aXRsZWAsIGBkZXNjcmlwdGlvbmAsIGBob2xpZGF5YCwgYHR5cGVgLCBhbmQgYFlZTU1ERGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSAgICAgICAgIE1lZXRpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgICAgICAgIGRhdGUgICAgICAgIC0gU2NoZWR1bGVkIGRhdGUgZm9yIHRoZSBtZWV0aW5nIGBcIllZWVktTU0tRERcImAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICB0aXRsZSAgICAgICAtIE1lZXRpbmcgdGl0bGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICBkZXNjcmlwdGlvbiAtIE1lZXRpbmcgZGVzY3JpcHRpb24uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICAgICAgICBob2xpZGF5ICAgICAtIElmIHRoZSBtZWV0aW5nIGlzIHRha2VuIGFzIGEgaG9saWRheS5cbiAqIEBwcm9wZXJ0eSB7J21lZXRpbmcnfSAgICAgIHR5cGUgICAgICAgIC0gVHlwZSBvZiBzY2hlZHVsZWQgYWN0aXZpdHkgYG1lZXRpbmdgLlxuICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPn0gWVlNTUREICAgICAgLSBTY2hlZHVsZWQgZGF0ZSBmb3IgdGhlIG1lZXRpbmcgYFtZWSwgTU0sIEREXWAuXG4gKi9cblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIGFjdGl2aXRpZXMgb2YgdGhlIG1vbnRoLCBvcmdhbml6ZWQgYnkgdHlwZS5cbiAqXG4gKiBBbiBgT2JqZWN0YCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGB0YXNrc2AsIGBldmVudHNgLCBgYXBwb2ludG1lbnRzYCBhbmRcbiAqIGBtZWV0aW5nc2AsIGV2ZXJ5IHByb3BlcnR5IG9mIHRoZSBvYmplY3QgaXMgYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSAgICAgICAgICAgICAgUGxhbm5lclxuICogQHByb3BlcnR5IHtBcnJheS48VGFzaz59ICAgICAgICB0YXNrcyAgICAgICAgLSBDb2xsZWN0aW9uIG9mIGFsbCB0YXNrcyBmb3IgdGhlIG1vbnRoLlxuICogQHByb3BlcnR5IHtBcnJheS48RXZlbnQ+fSAgICAgICBldmVudHMgICAgICAgLSBDb2xsZWN0aW9uIG9mIGFsbCBldmVudHMgZm9yIHRoZSBtb250aC5cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEFwcG9pbnRtZW50Pn0gYXBwb2ludG1lbnRzIC0gQ29sbGVjdGlvbiBvZiBhbGwgYXBwb2ludG1lbnRzIGZvciB0aGUgbW9udGguXG4gKiBAcHJvcGVydHkge0FycmF5LjxNZWV0aW5nPn0gICAgIG1lZXRpbmdzICAgICAtIENvbGxlY3Rpb24gb2YgYWxsIG1lZXRpbmdzIGZvciB0aGUgbW9udGguXG4gKi9cblxuLyoqXG4gKiBDb3VudCBvZiBhY3Rpdml0aWVzIG9mIHRoZSBkYXksIG9yZ2FuaXplZCBieSB0eXBlLlxuICpcbiAqIEFuIGBPYmplY3RgIHdpdGggdGhlIHByb3BlcnRpZXMgYHRhc2tzYCwgYGV2ZW50c2AsIGBhcHBvaW50bWVudHNgLCBgbWVldGluZ3NgXG4gKiBhbmQgdG90YWwsIGV2ZXJ5IHByb3BlcnR5IG9mIHRoZSBvYmplY3QgaXMgYW4gYG51bWJlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSBTY2hlZHVsZWRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0YXNrcyAgICAgICAgLSBUb3RhbCBudW1iZXIgb2YgdGhlIHRhc2tzIG9mIGEgZGF5LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGV2ZW50cyAgICAgICAtIFRvdGFsIG51bWJlciBvZiB0aGUgZXZlbnRzIG9mIGEgZGF5LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFwcG9pbnRtZW50cyAtIFRvdGFsIG51bWJlciBvZiB0aGUgYXBwb2ludG1lbnRzIG9mIGEgZGF5LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1lZXRpbmdzICAgICAtIFRvdGFsIG51bWJlciBvZiB0aGUgbWVldGluZ3Mgb2YgYSBkYXkuXG4gKiBAcHJvcGVydHkge251bWJlcn0gdG90YWwgICAgICAgIC0gVG90YWwgbnVtYmVyIG9mIGFjdGl2aXRpZXMgb2YgYSBkYXkuXG4gKi9cblxuLyoqXG4gKiBEZXRhaWxzIG9mIGEgZGF5LlxuICpcbiAqIEFuIGBPYmplY3RgIHdpdGggdGhlIHByb3BlcnRpZXMgYGRheWAsIGBkYXRlYCwgYHdlZWtkYXlgLCBgdHlwZWAsIGB3ZWVrYCxcbiAqIGB3b3JrZGF5YCwgYGlzV29ya2RheWAsIGBpc1dlZWtlbmRgLCBhbmQgYHNjaGVkdWxlZGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSAgICAgICAgIERheVxuICogQHByb3BlcnR5IHtudW1iZXJ9ICAgICAgICAgZGF5ICAgICAgIC0gRGF5IG9mIHRoZSBtb250aC5cbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj59IGRhdGUgICAgICAtIFRoZSBkYXRlIG9mIHRoZSBkYXkgYFtZWSwgTU0sIEREXWAuXG4gKiBAcHJvcGVydHkge251bWJlcn0gICAgICAgICB3ZWVrZGF5ICAgLSBUaGUgZGF5IG9mIHRoZSB3ZWVrLCB2YWx1ZSBpcyBsaWtlIGBEYXRlLnByb3RvdHlwZS5nZXREYXkoKWAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICB0eXBlICAgICAgLSBgZWxhcHNlZGAsIGBjdXJyZW50YCwgYHJlbWFpbmluZ2AuXG4gKiBAcHJvcGVydHkge251bWJlcn0gICAgICAgICB3ZWVrICAgICAgLSBXZWVrIG51bWJlciBvZiB0aGUgbW9udGguXG4gKiBAcHJvcGVydHkge251bWJlcn0gICAgICAgICB3b3JrZGF5ICAgLSBXb3JrZGF5IG51bWJlciBvZiB0aGUgbW9udGguXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICAgICAgICBpc1dvcmtkYXkgLSBJZiB0aGUgZGF5IGlzIGEgd29yayBkYXkuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICAgICAgICBpc1dlZWtlbmQgLSBJZiB0aGUgZGF5IGlzIGEgd2Vla2VuZC5cbiAqIEBwcm9wZXJ0eSB7U2NoZWR1bGVkfSAgICAgIHNjaGVkdWxlZCAtIE51bWJlciBvZiB0aGUgYWN0aXZpdGllcyBvZiBhIGRheS5cbiAqL1xuXG4vKipcbiAqIFRoZSBkZXRhaWxzIG9mIHRoZSBkYXlzIG9mIHRoZSBtb250aCwgYSBjb2xsZWN0aW9uIG9mIGluZm9ybWF0aW9uIGFib3V0IGFsbFxuICogdGhlIGRheXMgb2YgdGhlIG1vbnRoLlxuICpcbiAqIEFuIG9iamVjdCBgYXJyYXlgLCBldmVyeSBgYXJyYXlgIGVsZW1lbnQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgYSBkYXkgb2ZcbiAqIHRoZSBtb250aCwgSWYgaXQgaXMgYSB3ZWVrZW5kIG9yIGEgd29yayBkYXksIGlmIGl0IGhhcyBhbHJlYWR5IGVsYXBzZWQsIGl0IGlzXG4gKiB0aGUgY3VycmVudCBkYXksIHdlZWsgbnVtYmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdHlwZWRlZiB7QXJyYXkuPERheT59IERheXNcbiAqL1xuXG4vKipcbiAqIE1vbnRoJ3MgZGF0ZXMgc3VtbWFyeS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGVkZWYgIHtvYmplY3R9IERhdGVzU3VtbWFyeVxuICogQHByb3BlcnR5IHtEYXRlfSAgIHN0YXJ0ICAgICAgICAtIE1vbnRoJ3Mgc3RhcnQgZGF0ZS5cbiAqIEBwcm9wZXJ0eSB7RGF0ZX0gICBjdXJyZW50ICAgICAgLSBNb250aCdzIGN1cnJlbnQgZGF0ZS5cbiAqIEBwcm9wZXJ0eSB7RGF0ZX0gICBlbmQgICAgICAgICAgLSBNb250aCdzIGVuZCBkYXRlLlxuICovXG5cbi8qKlxuICogTW9udGgncyBkYXlzIHN1bW1hcnkuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSBEYXlzU3VtbWFyeVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGN1cnJlbnQgICAgIC0gTW9udGgncyBjdXJyZW50IGRheS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbCAgICAgICAtIE1vbnRoJ3MgdG90YWwgZGF5cy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlbGFwc2VkICAgICAtIE1vbnRoJ3MgZWxhcHNlZCBkYXlzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJlbWFpbmluZyAgIC0gTW9udGgncyByZW1haW5pbmcgZGF5cy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwZXJjZW50YWdlICAtIE1vbnRoJ3MgcGVyY2VudGFnZSByZW1haW5pbmcgZGF5cy5cbiAqL1xuXG4vKipcbiAqIE1vbnRoJ3Mgd2Vla3Mgc3VtbWFyeS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGVkZWYgIHtvYmplY3R9IFdlZWtzU3VtYXJ5XG4gKiBAcHJvcGVydHkge251bWJlcn0gY3VycmVudCAgICAgLSBNb250aCdzIGN1cnJlbnQgd2Vlay5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbCAgICAgICAtIE1vbnRoJ3MgdG90YWwgd2Vla3MuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZWxhcHNlZCAgICAgLSBNb250aCdzIGVsYXBzZWQgd2Vla3MuXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmVtYWluaW5nICAgLSBNb250aCdzIHJlbWFpbmluZyB3ZWVrcy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwZXJjZW50YWdlICAtIE1vbnRoJ3MgcGVyY2VudGFnZSByZW1haW5pbmcgd2Vla3MuXG4gKi9cblxuLyoqXG4gKiBNb250aCdzIHdvcmsgZGF5cyBzdW1tYXJ5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAdHlwZWRlZiAge29iamVjdH0gV29ya2RheXNTdW1hcnlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjdXJyZW50ICAgICAgICAtIE1vbnRoJ3MgY3VycmVudCB3b3JrIGRheS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbCAgICAgICAgICAtIE1vbnRoJ3MgdG90YWwgd29yayBkYXlzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGVsYXBzZWQgICAgICAgIC0gTW9udGgncyBlbGFwc2VkIHdvcmsgZGF5cy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByZW1haW5pbmcgICAgICAtIE1vbnRoJ3MgcmVtYWluaW5nIHdvcmsgZGF5cy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwZXJjZW50YWdlICAgICAtIE1vbnRoJ3MgcGVyY2VudGFnZSByZW1haW5pbmcgd29yayBkYXlzLlxuICovXG5cbi8qKlxuICogU3VtbWFyeSBvZiB0aGUgbW9udGggd2l0aCBpbmZvcm1hdGlvbiBvbiB3ZWVrcywgd29ya2luZyBkYXlzIGFuZCBkYXRlcy5cbiAqXG4gKiBBbiBgT2JqZWN0YCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGBkYXRlc2AsIGBkYXlzYCwgYHdlZWtzYCwgYW5kIGB3b3JrZGF5c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSAgICAgICAgIFN1bW1hcnlcbiAqIEBwcm9wZXJ0eSB7RGF0ZXNTdW1tYXJ5fSAgIGRhdGVzICAgIC0gTW9udGgncyBkYXRlcyBTdW1tYXJ5LlxuICogQHByb3BlcnR5IHtEYXlzU3VtbWFyeX0gICAgZGF5cyAgICAgLSBNb250aCdzIGRheXMgU3VtbWFyeS5cbiAqIEBwcm9wZXJ0eSB7V2Vla3NTdW1hcnl9ICAgIHdlZWtzICAgIC0gTW9udGgncyB3ZWVrcyBTdW1tYXJ5LlxuICogQHByb3BlcnR5IHtXb3JrZGF5c1N1bWFyeX0gd29ya2RheXMgLSBNb250aCdzIHdvcmsgZGF5cyBTdW1tYXJ5LlxuICovXG5cbi8vIOKUgeKUgVx0Q09OU1RBTlRTXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbmNvbnN0IEVSUk9SUyA9IE1vbnRoRXJyb3IubWVzc2FnZXM7XG5cbi8vIOKUgeKUgVx0TU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogVGhlIGBNb250aGAgY2xhc3MgbWFuYWdlcyB0aGUgaW5mb3JtYXRpb24gb2YgYSBtb250aCBmcm9tIGdpdmVuIGRhdGUsIHN1Y2ggYXNcbiAqIG51bWJlciBvZiB3ZWVrcywgbnVtYmVyIG9mIHdvcmsgZGF5cywgbnVtYmVyIG9mIHdlZWtlbmQuXG4gKlxuICogQHZlcnNpb24gMS4wLjBcbiAqL1xuY2xhc3MgTW9udGgge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBNb250aC5cbiAgICpcbiAgICogVGhlIGNsYXNzIGBNb250aGAgcmVxdWlyZXMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIGBvcHRpb25zYCwgbXVzdCBiZSBhblxuICAgKiBgT2JqZWN0YCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGBjdXJyZW50YCwgYHdlZWtlbmRgIGFuZCBgZGF0ZWJvb2tgLlxuICAgKlxuICAgKiBUaGUgYG9wdGlvbnMuY3VycmVudGAgdmFsdWUgbXVzdCBiZSB0eXBlIGBkYXRlYCwgaXQgaXMgdXNlZCBhcyBhIGJhc2UgdG8gaWRlbnRpZnlcbiAgICogdGhlIGRheXMgdGhhdCBoYXZlIGBlbGFwc2VkYCwgdGhlIGByZW1haW5pbmdgIGRheXMgb2YgdGhlIG1vbnRoIGFuZCBgY3VycmVudGAgZGF5LFxuICAgKiB0aGUgYGRlZmF1bHRgIHZhbHVlIGlzIGBuZXcgRGF0ZSgpYC5cbiAgICpcbiAgICogVGhlIGBvcHRpb25zLndlZWtlbmRgIHZhbHVlIG11c3QgYmUgYSBgc3RyaW5nYCBvciBpbnRlZ2VyIGBudW1iZXJgIGJldHdlZW4gYDBgIHRvIGAxNWAuXG4gICAqIElmIGEgYHN0cmluZ2AgaXMgcGFzc2VkLCB0aGUgc3RyaW5nIG11c3QgbWF0Y2ggdG8gcmVnZXggYC9eWzAtMV17N30kL2AsIHRoZVxuICAgKiBgZGVmYXVsdGAgdmFsdWUgaXMgYDBgLlxuICAgKlxuICAgKiBUaGUgYG9wdGlvbnMuZGF0ZWJvb2tgIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0IGBhcnJheWAsIHRoYXQgcmVwcmVzZW50cyBhXG4gICAqIGNvbGxlY3Rpb24gb2Ygc2NoZWR1bGVkIGFjdGl2aXRpZXMgZnJvbSBhIERhdGVib29rLCB0aGUgYGRlZmF1bHRgIHZhbHVlIGlzIGBbXWAuXG4gICAqXG4gICAqIEBtZW1iZXJvZiAgTW9udGhcbiAgICogQHBhcmFtICAgICB7b2JqZWN0fSBbb3B0aW9uc10gLSBNb250aCBjbGFzcyBvcHRpb25zLlxuICAgKiBAcGFyYW0gICAgIHtEYXRlfSBbb3B0aW9ucy5jdXJyZW50XSAtIEN1cnJlbnQgZGF0ZSBvZiBtb250aC5cbiAgICogQHBhcmFtICAgICB7V2Vla2VuZE9wdGlvbn0gW29wdGlvbnMud2Vla2VuZF0gLSBPcHRpb24gdG8gc3BlY2lmeSB3ZWVrZW5kcy5cbiAgICogQHBhcmFtICAgICB7RGF0ZWJvb2t9IFtvcHRpb25zLmRhdGVib29rXSAtIFNjaGVkdWxlZCBhY3Rpdml0aWVzIG9mIHRoZSBtb250aC5cbiAgICogQHRocm93cyAgICB7TW9udGhFcnJvcn0gSWYgYG9wdGlvbnMuY3VycmVudGAgaXMgbm90IGluc3RhbmNlIERhdGUuXG4gICAqIEB0aHJvd3MgICAge01vbnRoRXJyb3J9IElmIGBvcHRpb25zLndlZWtlbmRgIGlzIG5vdCBhIHZhbGlkIHdlZWtlbmQgb3B0aW9uLlxuICAgKiBAdGhyb3dzICAgIHtNb250aEVycm9yfSBJZiBgb3B0aW9ucy5kYXRlYm9va2AgaXMgbm90IGFuIGFycmF5LlxuICAgKiBAdGhyb3dzICAgIHtNb250aEVycm9yfSBJZiBhbnkgYG9wdGlvbnMuZGF0ZWJvb2tgIGVsZW1lbnRzIGlzIG5vdCBhIHZhbGlkIG9iamVjdC5cbiAgICogQGV4YW1wbGUgY29uc3QgbW9udGggPSBuZXcgTW9udGgoKTtcbiAgICpcbiAgICogQGV4YW1wbGUgY29uc3QgbW9udGggPSBuZXcgTW9udGgoe1xuICAgKiAgIGN1cnJlbnQ6IG5ldyBEYXRlKDIwMjEsIDAsIDE1KSxcbiAgICogICB3ZWVrZW5kOiAwLFxuICAgKiAgIGRhdGVib29rOiBbXG4gICAqICAgICB7XG4gICAqICAgICAgIGRhdGU6ICcyMDIxLTAxLTIwJyxcbiAgICogICAgICAgdGl0bGU6IFwiTW9tJ3MgYmlydGhkYXlcIixcbiAgICogICAgICAgZGVzY3JpcHRpb246IFwiRG9uJ3QgZm9yZ2V0IHRvIGJ1eSBhIGdpZnRcIixcbiAgICogICAgICAgdHlwZTogJ2V2ZW50JyxcbiAgICogICAgICAgaG9saWRheTogdHJ1ZSxcbiAgICogICAgIH0sXG4gICAqICAgICB7XG4gICAqICAgICAgIGRhdGU6ICcyMDIxLTAxLTEwJyxcbiAgICogICAgICAgdGl0bGU6ICdTZW5kIGZpbmFsIHNhbGVzIHJlcG9ydCcsXG4gICAqICAgICAgIGRlc2NyaXB0aW9uOiBcIkRvbid0IGZvcmdldCB0byBhdHRhY2ggZ3JhcGhpY3NcIixcbiAgICogICAgICAgdHlwZTogJ3Rhc2snLFxuICAgKiAgICAgICBob2xpZGF5OiB0cnVlLFxuICAgKiAgICAgfSxcbiAgICogICBdLFxuICAgKiB9KTtcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY3VycmVudCA9IG5ldyBEYXRlKCksIHdlZWtlbmQgPSAwLCBkYXRlYm9vayA9IFtdIH0gPSB7fSkge1xuICAgIGlmICghdXRpbHMuaXNEYXRlKGN1cnJlbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgTW9udGhFcnJvcihFUlJPUlMuVFlQRV9DVVJSRU5UX09QVElPTik7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZC53ZWVrZW5kKHdlZWtlbmQpKSB7XG4gICAgICB0aHJvdyBuZXcgTW9udGhFcnJvcihFUlJPUlMuSU5WQUxJRF9XRUVLRU5EX09QVElPTik7XG4gICAgfVxuICAgIGlmICghdXRpbHMuaXNBcnJheShkYXRlYm9vaykpIHtcbiAgICAgIHRocm93IG5ldyBNb250aEVycm9yKEVSUk9SUy5UWVBFX0RBVEVCT09LX09QVElPTik7XG4gICAgfVxuICAgIGlmICghdXRpbHMuaXNFbXB0eUFycmF5KGRhdGVib29rKSAmJiAhaXNWYWxpZC5kYXRlYm9vayhkYXRlYm9vaykpIHtcbiAgICAgIHRocm93IG5ldyBNb250aEVycm9yKEVSUk9SUy5JTlZBTElEX0RBVEVCT09LX1NDSEVNQSk7XG4gICAgfVxuICAgIC8vIMK7IERFRklORSBSRUFELU9OTFkgUFJPUEVSVElFU1xuICAgIC8qKlxuICAgICAqIEl0cyBhIG51bWJlciBgYXJyYXlgIHdpdGggdGhyZWUgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBUaGUgYXJyYXkgZWxlbWVudHMgcmVwcmVzZW50IHRoZSB5ZWFyIG51bWJlciwgbW9udGggbnVtYmVyIGFuZCBkYXlcbiAgICAgKiBudW1iZXIgYFtZWSwgTU0sIEREXWAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59XG4gICAgICogQG1lbWJlciBZWU1NRERcbiAgICAgKiBAbWVtYmVyb2YgTW9udGhcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ1lZTU1ERCcsIHsgdmFsdWU6IHJlYWRvbmx5LmNyZWF0ZVlZTU1ERChjdXJyZW50KSB9KTtcblxuICAgIC8qKlxuICAgICAqIEl0cyBhIG51bWJlciBgYXJyYXlgLlxuICAgICAqXG4gICAgICogVGhlIGFycmF5IGVsZW1lbnRzIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB3ZWVrIHRoYXQgYXJlIG5vdCB3b3JraW5nIGRheXNcbiAgICAgKiBhbmQgdGFrZXMgYXMgd2Vla2VuZCwgaXRzIHZhbHVlIGlzIGxpa2UgbGlrZSBhcyBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF5KClgLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgICAqIEBtZW1iZXIgV0VFS0VORFxuICAgICAqIEBtZW1iZXJvZiBNb250aFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnV0VFS0VORCcsIHsgdmFsdWU6IHJlYWRvbmx5LmNyZWF0ZVdlZWtlbmQod2Vla2VuZCkgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJdHMgYSBudW1iZXIgYGFycmF5YCwgd2l0aCB0aHJlZSBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIFRoZSBhcnJheSBlbGVtZW50cyByZXByZXNlbnQgb25lIGRheSBvZiB0aGUgbW9udGgsIHRoZSBkYXkgbW9udGggc3RhcnQsXG4gICAgICogdGhlIGRheSBtb250aCBjdXJyZW50IGFuZCB0aGUgZGF5IG1vbnRoIGVuZCwgaXRzIHZhbHVlIGlzIGxpa2VcbiAgICAgKiBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICAgKiBAbWVtYmVyIFNDRVxuICAgICAqIEBtZW1iZXJvZiBNb250aFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnU0NFJywgeyB2YWx1ZTogcmVhZG9ubHkuY3JlYXRlU0NFKHRoaXMuWVlNTUREKSB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5ZWFyIG9mIHRoZSBtb250aC5cbiAgICAgKlxuICAgICAqIEl0cyB2YWx1ZSBpcyBsaWtlIGBEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhcigpYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy55ZWFyID0gdGhpcy5ZWU1NRERbMF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCBudW1iZXIuXG4gICAgICpcbiAgICAgKiBJdHMgdmFsdWUgaXMgbGlrZSBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5udW1iZXIgPSB0aGlzLllZTU1ERFsxXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiBhY3Rpdml0aWVzIG9mIHRoZSBtb250aCwgb3JnYW5pemVkIGJ5IHR5cGUuXG4gICAgICpcbiAgICAgKiBBbiBgT2JqZWN0YCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGB0YXNrc2AsIGBldmVudHNgLCBgYXBwb2ludG1lbnRzYCBhbmRcbiAgICAgKiBgbWVldGluZ3NgLCBldmVyeSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IGlzIGFuIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7UGxhbm5lcn1cbiAgICAgKi9cbiAgICB0aGlzLnBsYW5uZXIgPSBjcmVhdGVQbGFubmVyKHtcbiAgICAgIGRhdGVib29rLFxuICAgICAgWVlNTUREOiB0aGlzLllZTU1ERCxcbiAgICAgIFNDRTogdGhpcy5TQ0UsXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbW9udGggZGF5cyB0aGF0IGFyZSB3ZWVrZW5kcy5cbiAgICAgKlxuICAgICAqIEEgbnVtYmVyIGBhcnJheWAgdGhhdCB2YWx1ZSBvZiBlbGVtZW50cyBpcyBsaWtlIGBEYXRlLnByb3RvdHlwZS5nZXREYXRlKClgLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMud2Vla2VuZHMgPSBjcmVhdGVXZWVrZW5kcyh7XG4gICAgICBZWU1NREQ6IHRoaXMuWVlNTURELFxuICAgICAgV0VFS0VORDogdGhpcy5XRUVLRU5ELFxuICAgICAgU0NFOiB0aGlzLlNDRSxcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCBkYXlzIHRoYXQgYXJlIGhvbGlkYXlzLlxuICAgICAqXG4gICAgICogQSBudW1iZXIgYGFycmF5YCB0aGF0IHZhbHVlIG9mIGVsZW1lbnRzIGlzIGxpa2UgYSBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cbiAgICAgKi9cbiAgICB0aGlzLmhvbGlkYXlzID0gY3JlYXRlSG9saWRheXModGhpcy5wbGFubmVyKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCBkYXlzIHRoYXQgYXJlIG5vbiB3b3JrZGF5cy5cbiAgICAgKlxuICAgICAqIEEgbnVtYmVyIGBhcnJheWAgdGhhdCB2YWx1ZSBvZiBlbGVtZW50cyBpcyBsaWtlIGEgYERhdGUucHJvdG90eXBlLmdldERhdGUoKWAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59XG4gICAgICovXG4gICAgdGhpcy5ub253b3JrZGF5cyA9IGNyZWF0ZU5vbldvcmtkYXlzKHtcbiAgICAgIHdlZWtlbmRzOiB0aGlzLndlZWtlbmRzLFxuICAgICAgaG9saWRheXM6IHRoaXMuaG9saWRheXMsXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGV0YWlscyBvZiB0aGUgZGF5cyBvZiB0aGUgbW9udGgsIGEgY29sbGVjdGlvbiBvZiBpbmZvcm1hdGlvbiBhYm91dFxuICAgICAqIGFsbCB0aGUgZGF5cyBvZiB0aGUgbW9udGguXG4gICAgICpcbiAgICAgKiBBbiBvYmplY3QgYGFycmF5YCwgZXZlcnkgYGFycmF5YCBlbGVtZW50IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IGEgZGF5XG4gICAgICogb2YgdGhlIG1vbnRoLCBJZiBpdCBpcyBhIHdlZWtlbmQgb3IgYSB3b3JrIGRheSwgaWYgaXQgaGFzIGFscmVhZHkgZWxhcHNlZCxcbiAgICAgKiBpdCBpcyB0aGUgY3VycmVudCBkYXksIHdlZWsgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHR5cGUge0RheXN9XG4gICAgICovXG4gICAgdGhpcy5kYXlzID0gY3JlYXRlRGF5cyh7XG4gICAgICBZWU1NREQ6IHRoaXMuWVlNTURELFxuICAgICAgU0NFOiB0aGlzLlNDRSxcbiAgICAgIHdlZWtlbmRzOiB0aGlzLndlZWtlbmRzLFxuICAgICAgbm9ud29ya2RheXM6IHRoaXMubm9ud29ya2RheXMsXG4gICAgICBwbGFubmVyOiB0aGlzLnBsYW5uZXIsXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTdW1tYXJ5IG9mIHRoZSBtb250aCB3aXRoIGluZm9ybWF0aW9uIG9uIHdlZWtzLCB3b3JraW5nIGRheXMgYW5kIGRhdGVzLlxuICAgICAqXG4gICAgICogQW4gYE9iamVjdGAgd2l0aCB0aGUgcHJvcGVydGllcyBgZGF0ZXNgLCBgZGF5c2AsIGB3ZWVrc2AsIGFuZCBgd29ya2RheXNgLlxuICAgICAqXG4gICAgICogQHR5cGUge1N1bW1hcnl9XG4gICAgICovXG4gICAgdGhpcy5zdW1tYXJ5ID0gY3JlYXRlU3VtbWFyeSh7XG4gICAgICBZWU1NREQ6IHRoaXMuWVlNTURELFxuICAgICAgbm9ud29ya2RheXM6IHRoaXMubm9ud29ya2RheXMsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGBhZGREYXRlYm9vaygpYCBtZXRob2QgYWRkcyBzY2hlZHVsZWQgYWN0aXZpdGllcy5cbiAgICpcbiAgICogYGRhdGVib29rYCB2YWx1ZSBtdXN0IGJlIGFuIG9iamVjdCBgYXJyYXlgLCAuXG4gICAqXG4gICAqIEBtZW1iZXJvZiAgTW9udGhcbiAgICogQHBhcmFtICAgICB7RGF0ZWJvb2t9IGRhdGVib29rIC0gUGxhbnMgb2YgdGhlIG1vbnRoLlxuICAgKiBAcmV0dXJucyAgIHt0aGlzfSBUbyBjaGFpbiBtZXRob2RzLlxuICAgKiBAdGhyb3dzICAgIHtNb250aEVycm9yfSBJZiBgZGF0ZWJvb2tgIGlzIG5vdCBhbiBhcnJheS5cbiAgICogQHRocm93cyAgICB7TW9udGhFcnJvcn0gSWYgYW55IGBkYXRlYm9va2AgZWxlbWVudHMgaXMgbm90IGEgdmFsaWQgb2JqZWN0LlxuICAgKiBAZXhhbXBsZSBjb25zdCBtb250aCA9IG5ldyBNb250aCgpO1xuICAgKlxuICAgKiBtb250aC5hZGREYXRlYm9vayhbXG4gICAqICAge1xuICAgKiAgICAgZGF0ZTogJzIwMjEtMDEtMTAnLFxuICAgKiAgICAgdGl0bGU6ICdTZW5kIGZpbmFsIHNhbGVzIHJlcG9ydCcsXG4gICAqICAgICBkZXNjcmlwdGlvbjogXCJEb24ndCBmb3JnZXQgdG8gYXR0YWNoIGdyYXBoaWNzXCIsXG4gICAqICAgICB0eXBlOiAndGFzaycsXG4gICAqICAgICBob2xpZGF5OiB0cnVlLFxuICAgKiAgIH0sXG4gICAqIF0pO1xuICAgKlxuICAgKi9cbiAgYWRkRGF0ZWJvb2soZGF0ZWJvb2spIHtcbiAgICBpZiAoIXV0aWxzLmlzQXJyYXkoZGF0ZWJvb2spKSB7XG4gICAgICB0aHJvdyBuZXcgTW9udGhFcnJvcihFUlJPUlMuVFlQRV9EQVRFQk9PS19PUFRJT04pO1xuICAgIH1cbiAgICBpZiAoIXV0aWxzLmlzRW1wdHlBcnJheShkYXRlYm9vaykgJiYgIWlzVmFsaWQuZGF0ZWJvb2soZGF0ZWJvb2spKSB7XG4gICAgICB0aHJvdyBuZXcgTW9udGhFcnJvcihFUlJPUlMuSU5WQUxJRF9EQVRFQk9PS19TQ0hFTUEpO1xuICAgIH1cbiAgICBjb25zdCB7IHRhc2tzLCBldmVudHMsIGFwcG9pbnRtZW50cywgbWVldGluZ3MgfSA9IGNyZWF0ZVBsYW5uZXIoe1xuICAgICAgZGF0ZWJvb2ssXG4gICAgICBZWU1NREQ6IHRoaXMuWVlNTURELFxuICAgICAgU0NFOiB0aGlzLlNDRSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHtcbiAgICAgIHRhc2tzOiBUYXNrcyxcbiAgICAgIGV2ZW50czogRXZlbnRzLFxuICAgICAgYXBwb2ludG1lbnRzOiBBcHBvaW50bWVudHMsXG4gICAgICBtZWV0aW5nczogTWVldGluZ3MsXG4gICAgfSA9IHRoaXMucGxhbm5lcjtcblxuICAgIC8vIMK7IEpPSU5EIE9MRCBBTkQgTkVXIERBVEVCT09LIElURU1TXG4gICAgY29uc3QgYWRkZWRUYXNrcyA9IFsuLi5UYXNrcywgLi4udGFza3NdO1xuICAgIGNvbnN0IGFkZGVkRXZlbnRzID0gWy4uLkV2ZW50cywgLi4uZXZlbnRzXTtcbiAgICBjb25zdCBhZGRlZEFwcG9pbnRtZW50cyA9IFsuLi5BcHBvaW50bWVudHMsIC4uLmFwcG9pbnRtZW50c107XG4gICAgY29uc3QgYWRkZWRNZWV0aW5ncyA9IFsuLi5NZWV0aW5ncywgLi4ubWVldGluZ3NdO1xuXG4gICAgLy8gwrsgVVBEQVRFIERBVEVCT09LIFBST1BFUlRJRVNcbiAgICB0aGlzLnBsYW5uZXIgPSB7XG4gICAgICB0YXNrczogYWRkZWRUYXNrcyxcbiAgICAgIGV2ZW50czogYWRkZWRFdmVudHMsXG4gICAgICBhcHBvaW50bWVudHM6IGFkZGVkQXBwb2ludG1lbnRzLFxuICAgICAgbWVldGluZ3M6IGFkZGVkTWVldGluZ3MsXG4gICAgfTtcblxuICAgIC8vIMK7IFVQREFURSBEQVlTIFBST1BFUlRJRVNcbiAgICB0aGlzLmhvbGlkYXlzID0gY3JlYXRlSG9saWRheXModGhpcy5wbGFubmVyKTtcbiAgICB0aGlzLm5vbndvcmtkYXlzID0gY3JlYXRlTm9uV29ya2RheXMoe1xuICAgICAgd2Vla2VuZHM6IHRoaXMud2Vla2VuZHMsXG4gICAgICBob2xpZGF5czogdGhpcy5ob2xpZGF5cyxcbiAgICB9KTtcbiAgICB0aGlzLmRheXMgPSBjcmVhdGVEYXlzKHtcbiAgICAgIFlZTU1ERDogdGhpcy5ZWU1NREQsXG4gICAgICBTQ0U6IHRoaXMuU0NFLFxuICAgICAgd2Vla2VuZHM6IHRoaXMud2Vla2VuZHMsXG4gICAgICBub253b3JrZGF5czogdGhpcy5ub253b3JrZGF5cyxcbiAgICAgIHBsYW5uZXI6IHRoaXMucGxhbm5lcixcbiAgICB9KTtcblxuICAgIC8vIMK7IFVQREFURSBTVU1NQVJZIFBST1BFUlRJRVNcbiAgICB0aGlzLnN1bW1hcnkgPSBjcmVhdGVTdW1tYXJ5KHtcbiAgICAgIFlZTU1ERDogdGhpcy5ZWU1NREQsXG4gICAgICBub253b3JrZGF5czogdGhpcy5ub253b3JrZGF5cyxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbi8vIOKUgeKUgVx0RVhQT1JUIE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRoO1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2VzIGNyZWF0ZURheXMgbW9kdWxlLCB1c2VkIHRvIGNyZWF0ZSBkYXlzIHByb3BlcnR5IHRoZVxuICogY2xhc3MgTW9udGguXG4gKi9cblxuLy8g4pSB4pSBXHRNT0RVTEVcdOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVxuLyoqXG4gKiBUaGUgYGNyZWF0ZURheXMoKWAgZnVuY3Rpb24gcmV0dXJucyBhIG9iamVjdCBhcnJheS4gVGhlIHZhbHVlIG9mIHRoZVxuICogcmV0dXJuZWQgZWxlbWVudHMgaXMgdGhlIHNhbWUgYERhdGUucHJvdG90eXBlLmdldERhdGUoKWAsIHRoYXQgcmVwcmVzZW50IHRoZVxuICogbW9udGgncyBkYXlzIHRoYXQgaXQgaXMgaG9saWRheXMuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHJlcXVpcmVzIGFuIHBhcmFtZXRlciBgb3B0aW9uc2AsIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBwcm9wZXJ0aWVzIGBZWU1NRERgLCBgU0NFYCwgYHdlZWtlbmRzYCwgYG5vbndvcmtkYXlzYCBhbmQgYHBsYW5uZXJgLlxuICpcbiAqIFRoZSBgb3B0aW9ucy5ZWU1NRERgIHZhbHVlIG11c3QgYmUgYSBudW1iZXIgYXJyYXkgd2l0aCB0aHJlZSBlbGVtZW50cywgdGhhdFxuICogcmVwcmVzZW50cyBhIGRhdGUgKHllYXIsIG1vbnRoIGFuZCBkYXkpLiBUaGUgdmFsdWUgb2YgdGhlIG1vbnRoIGlzIGFzXG4gKiBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAqXG4gKiBUaGUgYG9wdGlvbnMuU0NFYCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGFycmF5IHdpdGggdGhyZWUgZWxlbWVudHMuIFRoZSBhcnJheVxuICogdmFsdWVzIHJlcHJlc2VudCB0aGUgbW9udGgncyBzdGFydCBkYXksIG1vbnRoJ3MgY3VycmVudCBkYXkgYW5kIG1vbnRoJ3MgZW5kXG4gKiBkYXkuIFRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudHMgaXMgbGlrZSBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAqXG4gKiBUaGUgYG9wdGlvbnMud2Vla2VuZHNgIHZhbHVlIG11c3QgYmUgYSBudW1iZXIgYXJyYXksIHRoYXQgcmVwcmVzZW50cyB0aGVcbiAqIGRheXMgb2YgdGhlIG1vbnRoIHRoYXQgYXJlIHdlZWtlbmRzLiBUaGUgdmFsdWVzIGFyZSBsaWtlXG4gKiBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAqXG4gKiBUaGUgYG9wdGlvbnMubm9ud29ya2RheXNgIHZhbHVlIG11c3QgYmUgYSBudW1iZXIgYXJyYXksIHRoYXQgcmVwcmVzZW50cyB0aGVcbiAqIGRheXMgb2YgdGhlIG1vbnRoIHRoYXQgYXJlIG5vbiB3b3JrZGF5cy4gVGhlIHZhbHVlcyBhcmUgbGlrZVxuICogYERhdGUucHJvdG90eXBlLmdldERhdGUoKWAuXG4gKlxuICogVGhlIGBvcHRpb25zLnBsYW5uZXJgIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggdGhlIHByb3BlcnRpZXMgYHRhc2tzYCxcbiAqIGBldmVudHNgLCBgYXBwb2ludG1lbnRzYCBhbmQgYG1lZXRpbmdzYCwgdGhhdCByZXByZXNlbnQgc2NoZWR1bGVkIGFjdGl2aXRpZXNcbiAqIG9mIGRhdGVib29rLlxuICpcbiAqIEBwYXJhbSAgICAge29iamVjdH0gb3B0aW9ucyAtIEZ1bmN0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0gICAgIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy5ZWU1NREQgLSBBIG51bWJlciBhcnJheSB3aXRoIHRocmVlIGVsZW1lbnRzLlxuICogQHBhcmFtICAgICB7QXJyYXkuPG51bWJlcj59IG9wdGlvbnMuU0NFIC0gQSBudW1iZXIgYXJyYXkgd2l0aCB0aHJlZSBlbGVtZW50cy5cbiAqIEBwYXJhbSAgICAge0FycmF5LjxudW1iZXI+fSBvcHRpb25zLndlZWtlbmRzIC0gQSBudW1iZXIgYXJyYXkuXG4gKiBAcGFyYW0gICAgIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy5ub253b3JrZGF5cyAtIEEgbnVtYmVyIGFycmF5LlxuICogQHBhcmFtICAgICB7QXJyYXkuPG51bWJlcj59IG9wdGlvbnMucGxhbm5lciAtIEEgb2JqZWN0LlxuICogQHJldHVybnMgICB7QXJyYXkuPG9iamVjdD59IEFuIG9iamVjdCBhcnJheS5cbiAqIEBwcml2YXRlXG4gKiBAZXhhbXBsZSBjb25zdCBkYXlzID0gY3JlYXRlRGF5cyh7IHdlZWtlbmRzLCBob2xpZGF5cyB9KTtcbiAqXG4gKi9cbmNvbnN0IGNyZWF0ZURheXMgPSAoeyBZWU1NREQsIFNDRSwgd2Vla2VuZHMsIG5vbndvcmtkYXlzLCBwbGFubmVyIH0pID0+IHtcbiAgY29uc3QgW1lZLCBNTV0gPSBZWU1NREQ7XG4gIGNvbnN0IFtzdGFydCwgY3VycmVudCwgZW5kXSA9IFNDRTtcbiAgY29uc3QgeyB0YXNrcywgZXZlbnRzLCBhcHBvaW50bWVudHMsIG1lZXRpbmdzIH0gPSBwbGFubmVyO1xuICBjb25zdCBkYXlzID0gW107XG4gIGNvbnN0IHRlbXBvcmFyeSA9IG5ldyBEYXRlKFlZLCBNTSwgMSk7XG5cbiAgLy8gwrsgZmlyc3Qgd2Vla2RheSBvZiBtb250aFxuICBjb25zdCBmaXJzdCA9IHRlbXBvcmFyeS5nZXREYXkoKTtcbiAgbGV0IHdlZWsgPSBmaXJzdCA9PT0gMCA/IDAgOiAxO1xuICBsZXQgd29ya2RheSA9IDA7XG4gIGZvciAobGV0IGlkeCA9IHN0YXJ0OyBpZHggPD0gZW5kOyBpZHggKz0gMSkge1xuICAgIHRlbXBvcmFyeS5zZXREYXRlKGlkeCk7XG5cbiAgICBjb25zdCBpc1dvcmtkYXkgPSAhbm9ud29ya2RheXMuaW5jbHVkZXMoaWR4KTtcbiAgICBjb25zdCBpc1dlZWtlbmQgPSB3ZWVrZW5kcy5pbmNsdWRlcyhpZHgpO1xuICAgIGNvbnN0IHdlZWtkYXkgPSB0ZW1wb3JhcnkuZ2V0RGF5KCk7XG5cbiAgICBjb25zdCB0eXBlID0gaWR4IDwgY3VycmVudCA/ICdlbGFwc2VkJyA6IGlkeCA9PT0gY3VycmVudCA/ICdjdXJyZW50JyA6ICdyZW1haW5pbmcnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgY29uc3QgVEFTS1MgPSB0YXNrcy5maWx0ZXIoaXRlbSA9PiBpdGVtLllZTU1ERFsyXSA9PT0gaWR4KS5sZW5ndGg7XG4gICAgY29uc3QgRVZFTlRTID0gZXZlbnRzLmZpbHRlcihpdGVtID0+IGl0ZW0uWVlNTUREWzJdID09PSBpZHgpLmxlbmd0aDtcbiAgICBjb25zdCBBUFBPSU5UTUVOVFMgPSBhcHBvaW50bWVudHMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5ZWU1NRERbMl0gPT09IGlkeCkubGVuZ3RoO1xuICAgIGNvbnN0IE1FRVRJTkdTID0gbWVldGluZ3MuZmlsdGVyKGl0ZW0gPT4gaXRlbS5ZWU1NRERbMl0gPT09IGlkeCkubGVuZ3RoO1xuICAgIGNvbnN0IFRPVEFMID0gVEFTS1MgKyBFVkVOVFMgKyBBUFBPSU5UTUVOVFMgKyBNRUVUSU5HUztcbiAgICBjb25zdCBzY2hlZHVsZWQgPSB7XG4gICAgICB0YXNrczogVEFTS1MsXG4gICAgICBldmVudHM6IEVWRU5UUyxcbiAgICAgIGFwcG9pbnRtZW50czogQVBQT0lOVE1FTlRTLFxuICAgICAgbWVldGluZ3M6IE1FRVRJTkdTLFxuICAgICAgdG90YWw6IFRPVEFMLFxuICAgIH07XG5cbiAgICBpZiAod2Vla2RheSA9PT0gMCkge1xuICAgICAgd2VlayArPSAxO1xuICAgIH1cblxuICAgIGlmIChpc1dvcmtkYXkpIHtcbiAgICAgIHdvcmtkYXkgKz0gMTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXkgPSB7XG4gICAgICBkYXk6IGlkeCxcbiAgICAgIGRhdGU6IFtZWSwgTU0sIGlkeF0sXG4gICAgICB3ZWVrZGF5LFxuICAgICAgdHlwZSxcbiAgICAgIHdlZWssXG4gICAgICB3b3JrZGF5LFxuICAgICAgaXNXb3JrZGF5LFxuICAgICAgaXNXZWVrZW5kLFxuICAgICAgc2NoZWR1bGVkLFxuICAgIH07XG4gICAgZGF5cy5wdXNoKGRheSk7XG4gIH1cbiAgcmV0dXJuIGRheXM7XG59O1xuXG4vLyDilIHilIFcdEVYUE9SVCBNT0RVTEVcdOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEYXlzO1xuIiwiLyoqXG4gKiBAZmlsZSBNYW5hZ2VzIGNyZWF0ZUhvbGlkYXlzIG1vZHVsZSwgdXNlZCB0byBjcmVhdGUgbm9ud29ya2RheXMgcHJvcGVydHkgdGhlXG4gKiBjbGFzcyBNb250aC5cbiAqL1xuXG4vLyDilIHilIFcdEZVTkNUSU9OU1x04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgbWVyZ2VQbGFucygpYCBmdW5jdGlvbiByZXR1cm5zIGFuIG9iamVjdCBhcnJheSB3aXRoIHRoZSBhY3Rpdml0aWVzIG9mXG4gKiB0aGUgbW9udGgsIHJlcXVpcmVzIGEgcGFyYW1ldGVyIHRoYXQgbXVzdCBiZSBhbiBvYmplY3QsIHdpdGggdGhlIHByb3BlcnRpZXNcbiAqIGB0YXNrc2AsIGBldmVudHNgLCBgYXBwb2ludG1lbnRzYCBhbmQgYG1lZXRpbmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge29iamVjdH0gcGxhbm5lciAtIEFuIGBvYmplY3RgIHdpdGggbW9udGggYWN0aXZpdGllcyBvcmRlcmVkIGJ5IHR5cGUuXG4gKiBAcmV0dXJucyB7QXJyYXkuPG9iamVjdD59IEFuIGFycmF5IHdpdGggZGF0ZWJvb2sgaXRlbXMuXG4gKiBAZXhhbXBsZSBjb25zdCBkYXRlYm9vayA9IG1lcmdlUGxhbnMoe1xuICogICB0YXNrczogW10sXG4gKiAgIGV2ZW50czogW10sXG4gKiAgIGFwcG9pbnRtZW50czogW10sXG4gKiAgIG1lZXRpbmdzOiBbXSxcbiAqIH0pOyAvLyBleHBlY3RlZCB2YWx1ZSBbXVxuICpcbiAqL1xuY29uc3QgbWVyZ2VQbGFucyA9IHBsYW5uZXIgPT4gW1xuICAuLi5wbGFubmVyLnRhc2tzLFxuICAuLi5wbGFubmVyLmV2ZW50cyxcbiAgLi4ucGxhbm5lci5hcHBvaW50bWVudHMsXG4gIC4uLnBsYW5uZXIubWVldGluZ3MsXG5dO1xuXG4vLyDilIHilIFcdE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgY3JlYXRlSG9saWRheXMoKWAgZnVuY3Rpb24gcmV0dXJucyBhIG51bWJlciBhcnJheS4gVGhlIHZhbHVlIG9mIHRoZVxuICogcmV0dXJuZWQgZWxlbWVudHMgaXMgdGhlIHNhbWUgYERhdGUucHJvdG90eXBlLmdldERhdGUoKWAsIHRoYXQgcmVwcmVzZW50IHRoZVxuICogbW9udGgncyBkYXlzIHRoYXQgaXQgaXMgaG9saWRheXMuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHJlcXVpcmVzIGEgcGFyYW1ldGVyIHRoYXQgbXVzdCBiZSBhbiBvYmplY3QsIHdpdGggdGhlIHByb3BlcnRpZXNcbiAqIGB0YXNrc2AsIGBldmVudHNgLCBgYXBwb2ludG1lbnRzYCBhbmQgYG1lZXRpbmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICAge29iamVjdH0gcGxhbm5lciAtIE9iamVjdCB3aXRoIHNvcnRlZCBkYXRlYm9vayBpdGVtcyBieSB0eXBlLlxuICogQHJldHVybnMge0FycmF5LjxudW1iZXI+fSBBIG51bWJlciBhcnJheS5cbiAqIEBleGFtcGxlIGNvbnN0IGhvbGlkYXlzID0gY3JlYXRlSG9saWRheXMoZGF0ZWJvb2spOyAvLyBbLi4uXVxuICpcbiAqL1xuY29uc3QgY3JlYXRlSG9saWRheXMgPSBwbGFubmVyID0+IHtcbiAgY29uc3QgbWVyZ2VkID0gbWVyZ2VQbGFucyhwbGFubmVyKTtcbiAgaWYgKG1lcmdlZC5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgY29uc3QgaG9saWRheXMgPSBtZXJnZWQucmVkdWNlKChhLCBpKSA9PiAoaS5ob2xpZGF5ID8gWy4uLmEsIGkuWVlNTUREWzJdXSA6IFsuLi5hXSksIFtdKTtcbiAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChob2xpZGF5cykpO1xufTtcblxuLy8g4pSB4pSBXHRFWFBPUlQgTU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlSG9saWRheXM7XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZXMgY3JlYXRlTm9uV29ya2RheXMgbW9kdWxlLCB1c2VkIHRvIGNyZWF0ZSBub253b3JrZGF5cyBwcm9wZXJ0eSB0aGVcbiAqIGNsYXNzIE1vbnRoLlxuICovXG5cbi8vIOKUgeKUgVx0RlVOQ1RJT05TXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogVGhlIGBzb3J0QnlOdW1iZXIoKWAgZnVuY3Rpb24gc29ydHMgYSBudW1iZXIgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHtudW1iZXIgfSBmaXJzdCAtIFRoZSBmaXJzdCBlbGVtZW50IGZvciBjb21wYXJpc29uLlxuICogQHBhcmFtICAge251bWJlciB9IHNlY29uZCAtIFRoZSBzZWNvbmQgZWxlbWVudCBmb3IgY29tcGFyaXNvbi5cbiAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSBUaGUgc29ydGVkIGFycmF5LlxuICogQGV4YW1wbGUgWzEwMCwgMiwgMV0uc29ydChzb3J0QnlOdW1iZXIpOyAvLyBleHBlY3RlZCB2YWx1ZSBbMSwgMiwgMTAwXVxuICpcbiAqL1xuY29uc3Qgc29ydEJ5TnVtYmVyID0gKGZpcnN0LCBzZWNvbmQpID0+IGZpcnN0IC0gc2Vjb25kO1xuXG4vLyDilIHilIFcdE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgY3JlYXRlTm9uV29ya2RheXMoKWAgZnVuY3Rpb24gcmV0dXJucyBhIG51bWJlciBhcnJheSwgdGhhdCByZXByZXNlbnQgdGhlXG4gKiBtb250aCdzIGRheXMgdGhhdCBpdCBpcyBub24gd29ya2RheXMuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHJlcXVpcmVzIGFuIHBhcmFtZXRlciBgb3B0aW9uc2AsIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBwcm9wZXJ0aWVzIGB3ZWVrZW5kc2AgYW5kIGBob2xpZGF5c2AuXG4gKlxuICogVGhlIGBvcHRpb25zLndlZWtlbmRzYCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGFycmF5LCB0aGF0IHJlcHJlc2VudHMgdGhlXG4gKiBkYXlzIG9mIHRoZSBtb250aCB0aGF0IGFyZSB3ZWVrZW5kcy4gVGhlIHZhbHVlcyBhcmUgbGlrZSBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAqXG4gKiBUaGUgYG9wdGlvbnMuaG9saWRheXNgIHZhbHVlIG11c3QgYmUgYSBudW1iZXIgYXJyYXksIHRoYXQgcmVwcmVzZW50cyB0aGVcbiAqIGRheXMgb2YgdGhlIG1vbnRoIHRoYXQgYXJlIGhvbGlkYXlzLiBUaGUgdmFsdWVzIGFyZSBsaWtlIGBEYXRlLnByb3RvdHlwZS5nZXREYXRlKClgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBvcHRpb25zIC0gRnVuY3Rpb24gb3B0aW9ucy5cbiAqIEBwYXJhbSAgIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy53ZWVrZW5kcyAtIEFuIGFycmF5IHdpdGggbnVtZXJpYyBlbGVtZW50cy5cbiAqIEBwYXJhbSAgIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy5ob2xpZGF5cyAtIEFuIGFycmF5IHdpdGggbnVtZXJpYyBlbGVtZW50cy5cbiAqIEByZXR1cm5zIHtBcnJheS48bnVtYmVyPn0gIEFuIGFycmF5IHdpdGggbnVtZXJpYyBpdGVtcy5cbiAqIEBleGFtcGxlIGNvbnN0IG5vbndvcmtkYXlzID0gY3JlYXRlTm9uV29ya2RheXMoeyB3ZWVrZW5kcywgaG9saWRheXMgfSk7XG4gKlxuICovXG5jb25zdCBjcmVhdGVOb25Xb3JrZGF5cyA9ICh7IHdlZWtlbmRzLCBob2xpZGF5cyB9KSA9PiBBcnJheS5mcm9tKG5ldyBTZXQoWy4uLndlZWtlbmRzLCAuLi5ob2xpZGF5c10pKS5zb3J0KHNvcnRCeU51bWJlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJldHRpZXIvcHJldHRpZXJcblxuLy8g4pSB4pSBXHRNT0RVTEVcdOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVOb25Xb3JrZGF5cztcbiIsIi8qKlxuICogQGZpbGUgTWFuYWdlcyBjcmVhdGVQbGFubmVyIG1vZHVsZSwgdXNlZCB0byBjcmVhdGUgcGxhbm5lciBwcm9wZXJ0eSB0aGVcbiAqIGNsYXNzIE1vbnRoLlxuICovXG5cbi8vIOKUgeKUgVx0RlVOQ1RJT05TXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogVGhlIGBzb3J0QnlEYXkoKWAgZnVuY3Rpb24gc29ydHMgdGhlIGVsZW1lbnRzIG9mIGFuIG9iamVjdCBhcnJheSB3aXRoXG4gKiBwcm9wZXJ0eSBgZGF5YC4gVGhlIHByb3BlcnR5IGBkYXlgIGlzIHR5cGUgbnVtYmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICAgIHt7IGRheTpudW1iZXIgfX0gZmlyc3QgLSBUaGUgZmlyc3QgZWxlbWVudCBmb3IgY29tcGFyaXNvbi5cbiAqIEBwYXJhbSAgICAge3sgZGF5Om51bWJlciB9fSBzZWNvbmQgLSBUaGUgc2Vjb25kIGVsZW1lbnQgZm9yIGNvbXBhcmlzb24uXG4gKiBAcmV0dXJucyAgIHtBcnJheTx7IGRheTpudW1iZXIgfT59IFRoZSBzb3J0ZWQgYXJyYXkuXG4gKiBAZXhhbXBsZSBjb25zdCBkYXlzID0gW3sgZGF5OiAxMDAgfSwgeyBkYXk6IDIgfSwgeyBkYXk6IDEgfV07XG4gKlxuICogY29uc3Qgc29ydGVkID0gZGF5cy5zb3J0KHNvcnRCeURheSk7IC8vIFt7IGRheTogMSB9LCB7IGRheTogMiB9LCB7IGRheTogMTAwIH1dXG4gKlxuICovXG5jb25zdCBzb3J0QnlEYXkgPSAoZmlyc3QsIHNlY29uZCkgPT4gZmlyc3QuZGF5IC0gc2Vjb25kLmRheTtcblxuLyoqXG4gKiBUaGUgZnVuY3Rpb24gcmV0dXJucyBhIG51bWJlciBgYXJyYXlgIHdpdGggdGhyZWUgZWxlbWVudHMgdGhhdCByZXByZXNlbnQgYVxuICogZGF0ZSBgW1lZLE1NLCBERF1gLCBUaGUgZnVuY3Rpb24gcmVxdWlyZXMgdGhlIGBkYXRlYCBwYXJhbWV0ZXIgdGhhdCBtdXN0IGJlXG4gKiBgc3RyaW5nYCBhbmQgZm9sbG93IHRoZSBJU08gODYwMSBkYXRlIGZvcm1hdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGUgLSBBIHN0cmluZyB0aGF0IHJlcHJlc2VudCBhIGRhdGUuXG4gKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gQSBudW1iZXIgYXJyYXkgd2l0aCB0aHJlZSBlbGVtZW50cy5cbiAqIEBleGFtcGxlIGNvbnN0IFlZTU1ERCA9IElTTzJZWU1NREQoJzIwMjEtMDUtMjdUMDE6MTY6MjQuOTI5WicpOyAvLyBbMjAyMSwgNCwgMjddXG4gKlxuICovXG5jb25zdCBJU08yWVlNTUREID0gZGF0ZSA9PlxuICBkYXRlXG4gICAgLnNsaWNlKDAsIDEwKVxuICAgIC5zcGxpdCgnLScpXG4gICAgLm1hcChpdGVtID0+IHBhcnNlSW50KGl0ZW0sIDEwKSlcbiAgICAubWFwKChpdGVtLCBpZHgpID0+IChpZHggPT09IDEgPyBpdGVtIC0gMSA6IGl0ZW0pKTtcblxuLyoqXG4gKiBUaGUgYGZpbHRlckJ5RGF0ZSgpYCBmdW5jdGlvbiBmaWx0ZXIgYW4gb2JqZWN0IGBhcnJheWAsIGZpbHRlcmluZyB0aGVcbiAqIGVsZW1lbnRzIHRoYXQgZG8gbm90IGNvcnJlc3BvbmQgdG8gYSBnaXZlbiBwZXJpb2Qgb2YgdGltZS5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gcmVxdWlyZXMgYW4gcGFyYW1ldGVyIGBvcHRpb25zYCwgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHByb3BlcnRpZXMgYGRhdGVib29rYCBgWVlNTUREYCBhbmQgYFNDRWAuXG4gKlxuICogVGhlIGBvcHRpb25zLmRhdGVib29rYCB2YWx1ZSBtdXN0IGJlIGEgb2JqZWN0IGBhcnJheWAsIHRoYXQgcmVwcmVzZW50cyBhXG4gKiBjb2xsZWN0aW9uIG9mIHNjaGVkdWxlZCBhY3Rpdml0aWVzIGZyb20gYSBEYXRlYm9vay5cbiAqXG4gKiBUaGUgYG9wdGlvbnMuWVlNTUREYCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGBhcnJheWAgd2l0aCB0aHJlZSBlbGVtZW50cywgdGhhdFxuICogcmVwcmVzZW50cyBhIGRhdGUgKHllYXIsIG1vbnRoIGFuZCBkYXkpLiBUaGUgdmFsdWUgb2YgdGhlIG1vbnRoIGlzIGFzXG4gKiBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAqXG4gKiBUaGUgYG9wdGlvbnMuU0NFYCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGBhcnJheWAgd2l0aCB0aHJlZSBlbGVtZW50cy4gVGhlIGFycmF5XG4gKiB2YWx1ZXMgcmVwcmVzZW50IHRoZSBtb250aCdzIHN0YXJ0IGRheSwgbW9udGgncyBjdXJyZW50IGRheSBhbmQgbW9udGgncyBlbmRcbiAqIGRheS4gVGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50cyBpcyBsaWtlIGBEYXRlLnByb3RvdHlwZS5nZXREYXRlKClgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEZ1bmN0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0FycmF5LjxvYmplY3Q+fSBvcHRpb25zLmRhdGVib29rIC0gQW4gb2JqZWN0IGFycmF5LlxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy5ZWU1NREQgLSBBIG51bWJlciBgYXJyYXlgIHdpdGggdGhyZWUgZWxlbWVudHMuXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBvcHRpb25zLlNDRSAtIEEgbnVtYmVyIGBhcnJheWAgd2l0aCB0aHJlZSBlbGVtZW50cy5cbiAqIEByZXR1cm5zIHtBcnJheS48b2JqZWN0Pn0gQSBvYmplY3QgYGFycmF5YC5cbiAqIEBleGFtcGxlIGNvbnN0IGZpbHRlcmVkID0gZmlsdGVyQnlEYXRlKHtcbiAqICAgZGF0ZWJvb2s6IFtcbiAqICAgICB7IGRhdGU6ICcyMDIxLTAxLTAzJywgdGl0bGU6ICdkdW1teSB0b2RvIDAxJyB9LFxuICogICAgIHsgZGF0ZTogJzIwMjEtMDEtMTMnLCB0aXRsZTogJ2R1bW15IHRvZG8gMDInIH0sXG4gKiAgICAgeyBkYXRlOiAnMjAyMC0wMS0xMycsIHRpdGxlOiAnZHVtbXkgdG9kbyAwMycgfSxcbiAqICAgXSxcbiAqICAgWVlNTUREOiBbMjAyMSwgMCwgMTVdLFxuICogICBTQ0U6IFsxLCAxNSwgMzFdLFxuICogfSk7IC8vIFsuLi5dXG4gKlxuICovXG5jb25zdCBmaWx0ZXJCeURhdGUgPSAoeyBkYXRlYm9vaywgWVlNTURELCBTQ0UgfSkgPT5cbiAgZGF0ZWJvb2tcbiAgICAubWFwKHBsYW4gPT4gKHsgLi4ucGxhbiwgWVlNTUREOiBJU08yWVlNTUREKHBsYW4uZGF0ZSkgfSkpXG4gICAgLmZpbHRlcihwbGFuID0+IHtcbiAgICAgIGNvbnN0IFlFQVIgPSBwbGFuLllZTU1ERFswXSA9PT0gWVlNTUREWzBdO1xuICAgICAgY29uc3QgTU9OVEggPSBwbGFuLllZTU1ERFsxXSA9PT0gWVlNTUREWzFdO1xuICAgICAgY29uc3QgREFZUyA9IHBsYW4uWVlNTUREWzJdID49IFNDRVswXSAmJiBwbGFuLllZTU1ERFsyXSA8PSBTQ0VbMl07XG4gICAgICByZXR1cm4gWUVBUiAmJiBNT05USCAmJiBEQVlTO1xuICAgIH0pO1xuXG4vLyDilIHilIFcdE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG4vKipcbiAqIFRoZSBgY3JlYXRlUGxhbm5lcigpYCBmdW5jdGlvbiByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIGB0YXNrc2AsXG4gKiBgZXZlbnRzYCwgYGFwcG9pbnRtZW50c2AgYW5kIGBtZWV0aW5nc2AsIHRoYXQgcmVwcmVzZW50IHNjaGVkdWxlZCBhY3Rpdml0aWVzXG4gKiBvZiBkYXRlYm9vay5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gcmVxdWlyZXMgYW4gcGFyYW1ldGVyIGBvcHRpb25zYCwgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHByb3BlcnRpZXMgYGRhdGVib29rYCBgWVlNTUREYCBhbmQgYFNDRWAuXG4gKlxuICogVGhlIGBvcHRpb25zLmRhdGVib29rYCB2YWx1ZSBtdXN0IGJlIGEgb2JqZWN0IGBhcnJheWAsIHRoYXQgcmVwcmVzZW50cyBhXG4gKiBjb2xsZWN0aW9uIG9mIHNjaGVkdWxlZCBhY3Rpdml0aWVzIGZyb20gYSBEYXRlYm9vay5cbiAqXG4gKiBUaGUgYG9wdGlvbnMuWVlNTUREYCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGBhcnJheWAgd2l0aCB0aHJlZSBlbGVtZW50cywgdGhhdFxuICogcmVwcmVzZW50cyBhIGRhdGUgKHllYXIsIG1vbnRoIGFuZCBkYXkpLiBUaGUgdmFsdWUgb2YgdGhlIG1vbnRoIGlzIGFzXG4gKiBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAqXG4gKiBUaGUgYG9wdGlvbnMuU0NFYCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGBhcnJheWAgd2l0aCB0aHJlZSBlbGVtZW50cy4gVGhlIGFycmF5XG4gKiB2YWx1ZXMgcmVwcmVzZW50IHRoZSBtb250aCdzIHN0YXJ0IGRheSwgbW9udGgncyBjdXJyZW50IGRheSBhbmQgbW9udGgncyBlbmRcbiAqIGRheS4gVGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50cyBpcyBsaWtlIGBEYXRlLnByb3RvdHlwZS5nZXREYXRlKClgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEZ1bmN0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0FycmF5LjxvYmplY3Q+fSBvcHRpb25zLmRhdGVib29rIC0gQW4gb2JqZWN0IGBhcnJheWAsIGNvbGxlY3Rpb24gb2Ygc2NoZWR1bGVkIGFjdGl2aXRpZXMuXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBvcHRpb25zLllZTU1ERCAtIEEgbnVtYmVyIGBhcnJheWAgd2l0aCB0aHJlZSBlbGVtZW50cy5cbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IG9wdGlvbnMuU0NFIC0gQSBudW1iZXIgYGFycmF5YCB3aXRoIHRocmVlIGVsZW1lbnRzLlxuICogQHJldHVybnMge29iamVjdH0gQSBvYmplY3QuXG4gKiBAZXhhbXBsZSBjb25zdCBwbGFubmVyID0gY3JlYXRlUGxhbm5lcih7XG4gKiAgIGRhdGVib29rOiBbXG4gKiAgICAgeyBkYXRlOiAnMjAyMS0wMS0wMycsIHRpdGxlOiAnZHVtbXkgdG9kbyAwMScgfSxcbiAqICAgICB7IGRhdGU6ICcyMDIxLTAxLTEzJywgdGl0bGU6ICdkdW1teSB0b2RvIDAyJyB9LFxuICogICAgIHsgZGF0ZTogJzIwMjAtMDEtMTMnLCB0aXRsZTogJ2R1bW15IHRvZG8gMDMnIH0sXG4gKiAgIF0sXG4gKiAgIFlZTU1ERDogWzIwMjEsIDAsIDE1XSxcbiAqICAgU0NFOiBbMSwgMTUsIDMxXSxcbiAqIH0pOyAvLyB7IHRhc2tzOiBbLi5dLCBldmVudHM6IFsuLl0sIGFwcG9pbnRtZW50czogWy4uXSwgbWVldGluZ3M6IFsuLl0sIH07XG4gKlxuICovXG5jb25zdCBjcmVhdGVQbGFubmVyID0gKHsgZGF0ZWJvb2ssIFlZTU1ERCwgU0NFIH0pID0+IHtcbiAgY29uc3QgZmlsdGVyZWQgPSBmaWx0ZXJCeURhdGUoeyBkYXRlYm9vaywgWVlNTURELCBTQ0UgfSk7XG4gIGNvbnN0IHNvcnRlZCA9IGZpbHRlcmVkLnNvcnQoc29ydEJ5RGF5KTtcbiAgY29uc3QgdGFza3MgPSBzb3J0ZWQuZmlsdGVyKGl0ZW0gPT4gaXRlbS50eXBlID09PSAndGFzaycpO1xuICBjb25zdCBldmVudHMgPSBzb3J0ZWQuZmlsdGVyKGl0ZW0gPT4gaXRlbS50eXBlID09PSAnZXZlbnQnKTtcbiAgY29uc3QgYXBwb2ludG1lbnRzID0gc29ydGVkLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSA9PT0gJ2FwcG9pbnRtZW50Jyk7XG4gIGNvbnN0IG1lZXRpbmdzID0gc29ydGVkLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSA9PT0gJ21lZXRpbmcnKTtcbiAgcmV0dXJuIHtcbiAgICB0YXNrcyxcbiAgICBldmVudHMsXG4gICAgYXBwb2ludG1lbnRzLFxuICAgIG1lZXRpbmdzLFxuICB9O1xufTtcblxuLy8g4pSB4pSBXHRFWFBPUlQgTU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUGxhbm5lcjtcbiIsIi8qKlxuICogQGZpbGUgTWFuYWdlcyBjcmVhdGVTdW1tYXJ5IG1vZHVsZSwgdXNlZCB0byBjcmVhdGUgc3VtbWFyeSBwcm9wZXJ0eSB0aGVcbiAqIGNsYXNzIE1vbnRoLlxuICovXG5cbi8vIOKUgeKUgVx0TU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogVGhlIGBjcmVhdGVTdW1tYXJ5KClgIGZ1bnRpb24gcmV0dXJucyBhbiBgb2JqZWN0YCB3aXRoIG1vbnRoJ3MgaW5mb3JtYXRpb24sXG4gKiBtb250aCdzIHN1bW1hcnksIG1vbnRoJ3Mgd29yayBkYXlzIHN1bW1hcnksIG1vbnRoJ3Mgd2Vla3Mgc3VtbWFyeSwgbW9udGgnc1xuICogZGF5cyBzdW1tYXJ5IGFuZCBtb250aCdzIGRhdGVzIHN1bW1hcnkuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHJlcXVpcmVzIGFuIHBhcmFtZXRlciBgb3B0aW9uc2AsIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBwcm9wZXJ0aWVzIGBZWU1NRERgIGFuZCBgbm9ud29ya2RheXNgLlxuICpcbiAqIFRoZSBgb3B0aW9ucy5ZWU1NRERgIHZhbHVlIG11c3QgYmUgYSBudW1iZXIgYXJyYXkgd2l0aCB0aHJlZSBlbGVtZW50cywgdGhhdFxuICogcmVwcmVzZW50cyBhIGRhdGUgKHllYXIsIG1vbnRoIGFuZCBkYXkpLiBUaGUgdmFsdWUgb2YgdGhlIG1vbnRoIGlzIGFzXG4gKiBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSgpYC5cbiAqXG4gKiBUaGUgYG9wdGlvbnMubm9ud29ya2RheXNgIHZhbHVlIG11c3QgYmUgYSBudW1iZXIgYXJyYXksIHRoYXQgcmVwcmVzZW50IHRoZVxuICogbW9udGgncyBub24td29ya2luZyBkYXlzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBvcHRpb25zIC0gRnVuY3Rpb24gb3B0aW9ucy5cbiAqIEBwYXJhbSAgIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy5ZWU1NREQgIC0gQW4gYXJyYXkgd2l0aCB0aHJlZSBudW1lcmljIGl0ZW1zLlxuICogQHBhcmFtICAge0FycmF5LjxudW1iZXI+fSBvcHRpb25zLm5vbndvcmtkYXlzIC0gQW4gYXJyYXkgd2l0aCBudW1lcmljIGl0ZW1zLlxuICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggbW9udGgncyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlIGNvbnN0IHN1bW1hcnkgPSBjcmVhdGVTdW1tYXJ5KHtcbiAqICAgWVlNTUREOiBbMjAyMSwgNCwgMjVdLFxuICogICBub253b3JrZGF5czogWzEsIDIsIDgsIDksIDE1LCAxNiwgMjIsIDIzLCAyOSwgMzBdLFxuICogfSk7XG4gKlxuICovXG5jb25zdCBjcmVhdGVTdW1tYXJ5ID0gKHsgWVlNTURELCBub253b3JrZGF5cyB9KSA9PiB7XG4gIGNvbnN0IFtZWSwgTU0sIEREXSA9IFlZTU1ERDtcblxuICAvLyBEQVRFU1xuICBjb25zdCBzdGFydE1vbnRoID0gbmV3IERhdGUoWVksIE1NLCAxKTtcbiAgY29uc3QgY3VycmVudE1vbnRoID0gbmV3IERhdGUoWVksIE1NLCBERCk7XG4gIGNvbnN0IGVuZE1vbnRoID0gbmV3IERhdGUoWVksIE1NICsgMSwgMCk7XG5cbiAgLy8gREFZU1xuICBjb25zdCBjdXJyZW50RGF5ID0gY3VycmVudE1vbnRoLmdldERhdGUoKTtcbiAgY29uc3QgdG90YWxEYXlzID0gZW5kTW9udGguZ2V0RGF0ZSgpO1xuICBjb25zdCBlbGFwc2VkRGF5cyA9IGN1cnJlbnREYXkgLSAxO1xuICBjb25zdCByZW1haW5pbmdEYXlzID0gdG90YWxEYXlzIC0gY3VycmVudERheTtcbiAgY29uc3QgcGVyY2VudGFnZURheXMgPSBwYXJzZUZsb2F0KChjdXJyZW50RGF5IC8gdG90YWxEYXlzKS50b0ZpeGVkKDIpKTtcblxuICAvLyBURU1QT1JBUllcbiAgY29uc3QgdGVtcG9yYXJ5ID0gbmV3IERhdGUoWVksIE1NLCAxKTtcbiAgY29uc3QgZmlyc3RXZWVrZGF5ID0gc3RhcnRNb250aC5nZXREYXkoKTtcbiAgY29uc3Qgc3RhcnRJTlN1bmRheSA9IGZpcnN0V2Vla2RheSA9PT0gMDtcbiAgY29uc3Qgc3RhcnRXZWVrID0gc3RhcnRJTlN1bmRheSA/IDAgOiAxO1xuXG4gIGxldCBDVVJSRU5UX1dFRUsgPSBzdGFydFdlZWs7XG4gIGxldCBUT1RBTF9XRUVLUyA9IHN0YXJ0V2VlaztcbiAgbGV0IENVUlJFTlRfV09SS0RBWSA9IDA7XG4gIGxldCBUT1RBTF9XT1JLREFZUyA9IDA7XG5cbiAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8PSB0b3RhbERheXM7IGluZGV4ICs9IDEpIHtcbiAgICB0ZW1wb3Jhcnkuc2V0RGF0ZShpbmRleCk7XG4gICAgY29uc3QgZGF5V2VlayA9IHRlbXBvcmFyeS5nZXREYXkoKTtcbiAgICBpZiAoZGF5V2VlayA9PT0gMCAmJiBpbmRleCA8PSBjdXJyZW50RGF5KSB7XG4gICAgICBDVVJSRU5UX1dFRUsgKz0gMTtcbiAgICB9XG4gICAgaWYgKGRheVdlZWsgPT09IDApIHtcbiAgICAgIFRPVEFMX1dFRUtTICs9IDE7XG4gICAgfVxuICAgIGlmICghbm9ud29ya2RheXMuaW5jbHVkZXMoaW5kZXgpICYmIGluZGV4IDw9IGN1cnJlbnREYXkpIHtcbiAgICAgIENVUlJFTlRfV09SS0RBWSArPSAxO1xuICAgIH1cblxuICAgIGlmICghbm9ud29ya2RheXMuaW5jbHVkZXMoaW5kZXgpKSB7XG4gICAgICBUT1RBTF9XT1JLREFZUyArPSAxO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdFRUtTXG4gIGNvbnN0IGN1cnJlbnRXZWVrID0gQ1VSUkVOVF9XRUVLO1xuICBjb25zdCB0b3RhbFdlZWtzID0gVE9UQUxfV0VFS1M7XG4gIGNvbnN0IGVsYXBzZWRXZWVrcyA9IGN1cnJlbnRXZWVrIC0gMTtcbiAgY29uc3QgcmVtYWluaW5nV2Vla3MgPSB0b3RhbFdlZWtzIC0gY3VycmVudFdlZWs7XG4gIGNvbnN0IHBlcmNlbnRhZ2VXZWVrcyA9IHBhcnNlRmxvYXQoKGN1cnJlbnRXZWVrIC8gdG90YWxXZWVrcykudG9GaXhlZCgyKSk7XG5cbiAgLy8gV09SS0RBWVNcbiAgY29uc3QgY3VycmVudFdvcmtkYXkgPSBDVVJSRU5UX1dPUktEQVk7XG4gIGNvbnN0IHRvdGFsV29ya2RheXMgPSBUT1RBTF9XT1JLREFZUztcbiAgY29uc3QgZWxhcHNlZFdvcmtkYXlzID0gY3VycmVudFdvcmtkYXkgLSAxO1xuICBjb25zdCByZW1haW5pbmdXb3JrZGF5cyA9IHRvdGFsV29ya2RheXMgLSBjdXJyZW50V29ya2RheTtcbiAgY29uc3QgcGVyY2VudGFnZVdvcmtkYXlzID0gcGFyc2VGbG9hdCgoY3VycmVudFdvcmtkYXkgLyB0b3RhbFdvcmtkYXlzKS50b0ZpeGVkKDIpKTtcblxuICByZXR1cm4ge1xuICAgIGRhdGVzOiB7XG4gICAgICBzdGFydDogc3RhcnRNb250aCxcbiAgICAgIGN1cnJlbnQ6IGN1cnJlbnRNb250aCxcbiAgICAgIGVuZDogZW5kTW9udGgsXG4gICAgfSxcbiAgICBkYXlzOiB7XG4gICAgICBjdXJyZW50OiBjdXJyZW50RGF5LFxuICAgICAgdG90YWw6IHRvdGFsRGF5cyxcbiAgICAgIGVsYXBzZWQ6IGVsYXBzZWREYXlzLFxuICAgICAgcmVtYWluaW5nOiByZW1haW5pbmdEYXlzLFxuICAgICAgcGVyY2VudGFnZTogcGVyY2VudGFnZURheXMsXG4gICAgfSxcbiAgICB3ZWVrczoge1xuICAgICAgY3VycmVudDogY3VycmVudFdlZWssXG4gICAgICB0b3RhbDogdG90YWxXZWVrcyxcbiAgICAgIGVsYXBzZWQ6IGVsYXBzZWRXZWVrcyxcbiAgICAgIHJlbWFpbmluZzogcmVtYWluaW5nV2Vla3MsXG4gICAgICBwZXJjZW50YWdlOiBwZXJjZW50YWdlV2Vla3MsXG4gICAgfSxcbiAgICB3b3JrZGF5czoge1xuICAgICAgY3VycmVudDogY3VycmVudFdvcmtkYXksXG4gICAgICB0b3RhbDogdG90YWxXb3JrZGF5cyxcbiAgICAgIGVsYXBzZWQ6IGVsYXBzZWRXb3JrZGF5cyxcbiAgICAgIHJlbWFpbmluZzogcmVtYWluaW5nV29ya2RheXMsXG4gICAgICBwZXJjZW50YWdlOiBwZXJjZW50YWdlV29ya2RheXMsXG4gICAgfSxcbiAgfTtcbn07XG5cbi8vIOKUgeKUgVx0RVhQT1JUIE1PRFVMRVx04pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVN1bW1hcnk7XG4iLCIvKipcbiAqIEBmaWxlIE1hbmFnZXMgY3JlYXRlV2Vla2VuZHMgbW9kdWxlLCB1c2VkIHRvIGNyZWF0ZSB3ZWVrZW5kcyBwcm9wZXJ0eSB0aGVcbiAqIGNsYXNzIE1vbnRoLlxuICovXG5cbi8vIOKUgeKUgVx0TU9EVUxFXHTilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIFcbi8qKlxuICogVGhlIGBjcmVhdGVXZWVrZW5kcygpYCBmdW5jdGlvbiByZXR1cm5zIGEgbnVtYmVyIGBhcnJheWAgdGhhdCByZXByZXNlbnQgdGhlXG4gKiBtb250aCdzIGRheXMgdGhhdCBhcmUgd2Vla2VuZC4gVGhlIHZhbHVlIG9mIHRoZSByZXR1cm5lZCBlbGVtZW50cyBpcyB0aGUgc2FtZVxuICogYERhdGUucHJvdG90eXBlLmdldERhdGUoKWAuXG4gKlxuICogVGhlIGZ1bmN0aW9uIHJlcXVpcmVzIGFuIHBhcmFtZXRlciBgb3B0aW9uc2AsIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBwcm9wZXJ0aWVzIGBZWU1NRERgIGBXRUVLRU5EYCBhbmQgYFNDRWAuXG4gKlxuICogVGhlIGBvcHRpb25zLllZTU1ERGAgdmFsdWUgbXVzdCBiZSBhIG51bWJlciBhcnJheSB3aXRoIHRocmVlIGVsZW1lbnRzLCB0aGF0XG4gKiByZXByZXNlbnRzIGEgZGF0ZSAoeWVhciwgbW9udGggYW5kIGRheSkuIFRoZSB2YWx1ZSBvZiB0aGUgbW9udGggaXMgYXNcbiAqIGBEYXRlLnByb3RvdHlwZS5nZXREYXRlKClgLlxuICpcbiAqIFRoZSBgb3B0aW9ucy5XRUVLRU5EYCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyIGFycmF5LiBUaGUgYXJyYXkgdmFsdWVzIHJlcHJlc2VudFxuICogdGhlIGRheXMgb2YgdGhlIHdlZWsgdGhhdCBhcmUgd2Vla2VuZCwgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50cyBpcyBsaWtlXG4gKiBgRGF0ZS5wcm90b3R5cGUuZ2V0RGF5KClgLlxuICpcbiAqIFRoZSBgb3B0aW9ucy5TQ0VgIHZhbHVlIG11c3QgYmUgYSBudW1iZXIgYXJyYXkgd2l0aCB0aHJlZSBlbGVtZW50cy4gVGhlIGFycmF5XG4gKiB2YWx1ZXMgcmVwcmVzZW50IHRoZSBtb250aCdzIHN0YXJ0IGRheSwgbW9udGgncyBjdXJyZW50IGRheSBhbmQgbW9udGgncyBlbmRcbiAqIGRheS4gVGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50cyBpcyBsaWtlIGBEYXRlLnByb3RvdHlwZS5nZXREYXRlKClgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICB7b2JqZWN0fSBvcHRpb25zIC0gRnVuY3Rpb24gb3B0aW9ucy5cbiAqIEBwYXJhbSAgIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy5ZWU1NREQgLSBBIG51bWJlciBhcnJheSB3aXRoIHRocmVlIGVsZW1lbnRzLlxuICogQHBhcmFtICAge0FycmF5LjxudW1iZXI+fSBvcHRpb25zLldFRUtFTkQgLSBBIG51bWJlciBhcnJheS5cbiAqIEBwYXJhbSAgIHtBcnJheS48bnVtYmVyPn0gb3B0aW9ucy5TQ0UgLSBBIG51bWJlciBhcnJheSB3aXRoIHRocmVlIGVsZW1lbnRzLlxuICogQHJldHVybnMge0FycmF5LjxudW1iZXI+fSBBIG51bWJlciBhcnJheS5cbiAqIEBleGFtcGxlIGNvbnN0IHdlZWtlbmRzID0gY3JlYXRlV2Vla2VuZHMoe1xuICogICBZWU1NREQ6IFsyMDIwLCAwLCAxXSxcbiAqICAgV0VFS0VORDogWzYsIDBdLFxuICogICBTQ0U6IFsxLCAxMiwgMzFdLFxuICogfSk7IC8vIGV4cGVjdGVkIHZhbHVlIFs0LCA1LCAxMSwgMTIsIDE4LCAxOSwgMjUsIDI2XVxuICpcbiAqL1xuY29uc3QgY3JlYXRlV2Vla2VuZHMgPSAoeyBZWU1NREQsIFdFRUtFTkQsIFNDRSB9KSA9PiB7XG4gIGNvbnN0IFtZWSwgTU1dID0gWVlNTUREO1xuICBjb25zdCB0b3RhbCA9IFNDRVsyXTtcbiAgY29uc3QgdGVtcG9yYXJ5ID0gbmV3IERhdGUoWVksIE1NLCAxKTtcbiAgY29uc3Qgd2Vla2VuZHMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSB0b3RhbDsgaSArPSAxKSB7XG4gICAgdGVtcG9yYXJ5LnNldERhdGUoaSk7XG4gICAgY29uc3Qgd2Vla2RheSA9IHRlbXBvcmFyeS5nZXREYXkoKTtcbiAgICBpZiAoV0VFS0VORC5pbmNsdWRlcyh3ZWVrZGF5KSkgd2Vla2VuZHMucHVzaChpKTtcbiAgfVxuICByZXR1cm4gd2Vla2VuZHM7XG59O1xuXG4vLyDilIHilIFcdEVYUE9SVCBNT0RVTEVcdOKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVXZWVrZW5kcztcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTc5KTtcbiJdLCJuYW1lcyI6WyJNb250aEVycm9yIiwibWVzc2FnZSIsInBhcmFtcyIsIiRtZXNzYWdlIiwiYXBwbHkiLCJUeXBlRXJyb3IiLCJuYW1lIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIlRZUEVfQ1VSUkVOVF9PUFRJT04iLCJUWVBFX0RBVEVCT09LX09QVElPTiIsIklOVkFMSURfV0VFS0VORF9PUFRJT04iLCJJTlZBTElEX0RBVEVCT09LX1NDSEVNQSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1dGlscyIsInJlcXVpcmUiLCJyZWdleFdlZWtlbmQiLCJyZWdleERhdGUiLCJ0eXBlcyIsIndlZWtlbmQiLCJpc0J5TnVtYmVyIiwiaXNJbnROdW1iZXIiLCJpc0J5UGF0dGVybiIsInRlc3QiLCJkYXRlYm9vayIsInBsYW5zIiwibWFwIiwicGxhbiIsImlzT2JqZWN0IiwiaXNTdHJpbmciLCJkYXRlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInR5cGUiLCJpc0Jvb2xlYW4iLCJob2xpZGF5IiwiTnVtYmVyIiwiaXNOYU4iLCJEYXRlIiwicGFyc2UiLCJpbmNsdWRlcyIsImxlbmd0aCIsImlzVmFsaWRQbGFuIiwiZXZlcnkiLCJpdGVtIiwibWFwV2Vla2VuZCIsIk1hcCIsIndlZWtkYXlzIiwiY3JlYXRlWVlNTUREIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJjcmVhdGVXZWVrZW5kIiwib3B0aW9uIiwidmFsdWUiLCJjaGFycyIsImdldCIsInNwbGl0IiwicmVkdWNlIiwiYWNjIiwiY3VyciIsImlkeCIsImNyZWF0ZVNDRSIsIllZTU1ERCIsIllZIiwiTU0iLCJyZWdleCIsInRvU3RyaW5nIiwiY2FsbCIsInRvVHlwZSIsIm1hdGNoIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJpc051bGxPYmplY3QiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImlzQXJyYXkiLCJBcnJheSIsImlzRGF0ZSIsImlzRnVuY3Rpb24iLCJpc051bWJlciIsImlzRmxvYXROdW1iZXIiLCJpc0ludGVnZXIiLCJpc1BPSk8iLCJjb25zdHJ1Y3RvciIsImlzRW1wdHlBcnJheSIsImlzRW1wdHlPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNBcnJheU9mIiwiYXJyYXkiLCJpc09iamVjdE9mIiwib2JqZWN0Iiwia2V5cyIsImtleSIsImlzVmFsaWQiLCJyZWFkb25seSIsImNyZWF0ZVBsYW5uZXIiLCJjcmVhdGVXZWVrZW5kcyIsImNyZWF0ZUhvbGlkYXlzIiwiY3JlYXRlTm9uV29ya2RheXMiLCJjcmVhdGVEYXlzIiwiY3JlYXRlU3VtbWFyeSIsIkVSUk9SUyIsIm1lc3NhZ2VzIiwiTW9udGgiLCJjdXJyZW50IiwiZGVmaW5lUHJvcGVydHkiLCJ0aGlzIiwieWVhciIsIm51bWJlciIsInBsYW5uZXIiLCJTQ0UiLCJ3ZWVrZW5kcyIsIldFRUtFTkQiLCJob2xpZGF5cyIsIm5vbndvcmtkYXlzIiwiZGF5cyIsInN1bW1hcnkiLCJ0YXNrcyIsImV2ZW50cyIsImFwcG9pbnRtZW50cyIsIm1lZXRpbmdzIiwiVGFza3MiLCJFdmVudHMiLCJBcHBvaW50bWVudHMiLCJNZWV0aW5ncyIsImFkZGVkVGFza3MiLCJhZGRlZEV2ZW50cyIsImFkZGVkQXBwb2ludG1lbnRzIiwiYWRkZWRNZWV0aW5ncyIsInN0YXJ0IiwiZW5kIiwidGVtcG9yYXJ5Iiwid2VlayIsImdldERheSIsIndvcmtkYXkiLCJzZXREYXRlIiwiaXNXb3JrZGF5IiwiaXNXZWVrZW5kIiwid2Vla2RheSIsIlRBU0tTIiwiZmlsdGVyIiwiRVZFTlRTIiwiQVBQT0lOVE1FTlRTIiwiTUVFVElOR1MiLCJkYXkiLCJzY2hlZHVsZWQiLCJ0b3RhbCIsInB1c2giLCJtZXJnZWQiLCJtZXJnZVBsYW5zIiwiYSIsImkiLCJmcm9tIiwiU2V0Iiwic29ydEJ5TnVtYmVyIiwiZmlyc3QiLCJzZWNvbmQiLCJzb3J0Iiwic29ydEJ5RGF5Iiwic29ydGVkIiwic2xpY2UiLCJwYXJzZUludCIsIllFQVIiLCJNT05USCIsIkRBWVMiLCJERCIsInN0YXJ0TW9udGgiLCJjdXJyZW50TW9udGgiLCJlbmRNb250aCIsImN1cnJlbnREYXkiLCJ0b3RhbERheXMiLCJlbGFwc2VkRGF5cyIsInJlbWFpbmluZ0RheXMiLCJwZXJjZW50YWdlRGF5cyIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwic3RhcnRXZWVrIiwiQ1VSUkVOVF9XRUVLIiwiVE9UQUxfV0VFS1MiLCJDVVJSRU5UX1dPUktEQVkiLCJUT1RBTF9XT1JLREFZUyIsImluZGV4IiwiZGF5V2VlayIsImRhdGVzIiwiZWxhcHNlZCIsInJlbWFpbmluZyIsInBlcmNlbnRhZ2UiLCJ3ZWVrcyIsIndvcmtkYXlzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iXSwic291cmNlUm9vdCI6IiJ9